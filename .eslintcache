[{"C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\App.tsx":"1","C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\features\\Data\\ProjectSlice.tsx":"2","C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\features\\Interfaces\\Desktop\\API\\API.tsx":"3","C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\index.tsx":"4","C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\history\\history.tsx":"5","C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\features\\Interfaces\\Desktop\\Project\\Project.tsx":"6","C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\serviceWorker.ts":"7","C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\routes\\routerBlock.js":"8","C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\app\\configureStore.tsx":"9","C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\features\\Interfaces\\Desktop\\HeaderBar\\HeaderBarMax.tsx":"10"},{"size":408,"mtime":1613434011113,"results":"11","hashOfConfig":"12"},{"size":9570,"mtime":1612759677374,"results":"13","hashOfConfig":"12"},{"size":132444,"mtime":1612759695939,"results":"14","hashOfConfig":"12"},{"size":584,"mtime":1603294230114,"results":"15","hashOfConfig":"12"},{"size":119,"mtime":1602347012606,"results":"16","hashOfConfig":"12"},{"size":43537,"mtime":1613183308041,"results":"17","hashOfConfig":"12"},{"size":5295,"mtime":1595302592680,"results":"18","hashOfConfig":"12"},{"size":4815,"mtime":1613013849952,"results":"19","hashOfConfig":"12"},{"size":1155,"mtime":1602585291412,"results":"20","hashOfConfig":"12"},{"size":8939,"mtime":1613459558096,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tggt1o",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\App.tsx",[],"C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\features\\Data\\ProjectSlice.tsx",[],["49","50"],"C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\features\\Interfaces\\Desktop\\API\\API.tsx",["51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67"],"import React from \"react\";\r\nimport { View, StyleSheet, Dimensions } from \"react-native\";\r\nimport { useFormik } from \"formik\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport * as yup from \"yup\";\r\nimport ReactPlayer from \"react-player\";\r\n\r\nimport { v4 } from \"uuid\";\r\nimport $ from \"jquery\";\r\n\r\nimport HeaderBar from \"../HeaderBar/HeaderBar\";\r\nimport {\r\n  projectDataFetch,\r\n  retrieveAllProjectsIds,\r\n} from \"../../../Data/ProjectSlice\";\r\n\r\nimport \"./APIStyles.scss\";\r\nimport {\r\n  dataBaseUrl,\r\n  localUrl,\r\n  userBaseUrl,\r\n  store,\r\n} from \"../../../../routes/routerBlock\";\r\n\r\ninterface FormConfigurationInterface {\r\n  styles: any;\r\n  customInitialFormValues: {\r\n    initialFormValues: any;\r\n    setInitialFormValues: Function;\r\n  };\r\n  ids: {\r\n    mediaDataIds: {\r\n      current: Record<string, any> & {\r\n        video: string | number;\r\n        galleryPhoto: string | number;\r\n        passage: string | number;\r\n      };\r\n    };\r\n    setMediaDataIds: React.Dispatch<\r\n      React.SetStateAction<{\r\n        current: {\r\n          video: string | number;\r\n          galleryPhoto: string | number;\r\n          passage: string | number;\r\n        };\r\n      }>\r\n    >;\r\n  };\r\n  formFacade: {\r\n    initialInputs: Array<{ name: string; inputType: string }>;\r\n    mediaInputsNav: Array<{ mediaType: string; buttonText: string }>;\r\n    mediaMiniFormInputs: Array<{\r\n      mediaType: string;\r\n      addButtonText: string;\r\n      inputsOpts: Array<{\r\n        key: string;\r\n        typeOfInput: string;\r\n        childrenElements?: Array<any>;\r\n        initialValue?: any;\r\n      }>;\r\n      inputsDeletionCallback: Function;\r\n    }>;\r\n  };\r\n  formPreviewDataOpts: {\r\n    formPreviewData: {\r\n      stored: any;\r\n      current: { type: string; data: any };\r\n    };\r\n    setFormPreviewData: React.Dispatch<\r\n      React.SetStateAction<{\r\n        stored: any;\r\n        current: {\r\n          type: string;\r\n          data: any;\r\n        };\r\n      }>\r\n    >;\r\n  };\r\n  customFormSchema: {\r\n    validSchema: any;\r\n    setValidSchema: Function;\r\n  };\r\n  storedRefs: Record<string, React.MutableRefObject<any>>;\r\n  dataForForm?: any;\r\n}\r\n\r\ninterface genericObject extends Record<string, any> {}\r\n\r\nconst FormConfiguration: React.FC<FormConfigurationInterface> = ({\r\n  styles,\r\n  customInitialFormValues,\r\n  ids,\r\n  formFacade,\r\n  formPreviewDataOpts,\r\n  customFormSchema,\r\n  storedRefs,\r\n  dataForForm,\r\n}) => {\r\n  // Destructure incoming props\r\n  const { initialFormValues } = customInitialFormValues;\r\n  const { validSchema, setValidSchema } = customFormSchema;\r\n  const { mediaDataIds, setMediaDataIds } = ids;\r\n  const { initialInputs, mediaInputsNav, mediaMiniFormInputs } = formFacade;\r\n  const { formPreviewData, setFormPreviewData } = formPreviewDataOpts;\r\n\r\n  const [extraHeaderOptions, setExtraHeaderOptions] = React.useState(() => {\r\n    return <></>;\r\n  });\r\n\r\n  // Handle Form Submission\r\n  const handleFormSubmission = (values: genericObject) => {\r\n    console.log({ values, validSchema });\r\n    setFormPreviewData((previousFormPreviewData) => {\r\n      return {\r\n        ...previousFormPreviewData,\r\n        current: {\r\n          type: \"allNewData\",\r\n          data: values,\r\n        },\r\n      };\r\n    });\r\n    formikConf.resetForm(formikConf);\r\n  };\r\n\r\n  // Generate new form input\r\n  const newFormElement = (\r\n    whatType: string,\r\n    mediaType: string,\r\n    mediaKeyRef: string,\r\n    dataKeyRefId: string | number | undefined,\r\n    classNameForStyle: string,\r\n    childElements?: Array<any>,\r\n    dataConfigObject?: object,\r\n    initialInputValue?: any,\r\n    inputsDeletionCallBack?: Function\r\n  ) => {\r\n    const generatedSubId = v4();\r\n\r\n    const createNewInputLabelId = () => {\r\n      if (whatType === `textInputWithSubIndex`) {\r\n        return `${mediaType}-${mediaKeyRef}-label-id-${dataKeyRefId}-subId-${generatedSubId}`;\r\n      }\r\n\r\n      if (mediaKeyRef === `data`) {\r\n        return `${mediaType}-${mediaKeyRef}-label-id-${dataKeyRefId}`;\r\n      } else {\r\n        return `${mediaType}-${mediaKeyRef}-label-id-${dataKeyRefId}`;\r\n      }\r\n    };\r\n\r\n    const createNewInputLabelText = () => {\r\n      if (whatType === `textInputWithSubIndex`) {\r\n        const clarifyingText = () => {\r\n          return `${mediaKeyRef}:${String(generatedSubId).slice(0, 6)}`;\r\n        };\r\n        const clarifiedText = clarifyingText();\r\n        return clarifiedText;\r\n      }\r\n      if (mediaKeyRef === `data`) {\r\n        const clarifyingText = () => {\r\n          return `${mediaType}:${String(dataKeyRefId).slice(0, 6)}`;\r\n        };\r\n        const clarifiedText = clarifyingText();\r\n        return clarifiedText;\r\n      } else {\r\n        return mediaKeyRef;\r\n      }\r\n    };\r\n\r\n    let newFormElementLabel = document.createElement(\"div\");\r\n    newFormElementLabel.id = createNewInputLabelId();\r\n    newFormElementLabel.className = `${classNameForStyle}-label`;\r\n    newFormElementLabel.innerHTML = createNewInputLabelText();\r\n\r\n    let newFormElementsRemoveButton = document.createElement(\"div\");\r\n\r\n    let newFormElementsContainer = document.createElement(\"div\");\r\n\r\n    let newFormElement: any;\r\n\r\n    if (whatType === `textInput`) {\r\n      newFormElementsContainer.className = `${classNameForStyle}-text-input-container`;\r\n      newFormElementsRemoveButton.className = `${classNameForStyle}-text-input-remove-button`;\r\n\r\n      let newFormInputElement = document.createElement(\"input\");\r\n      newFormInputElement.id = `${mediaType}s.${mediaType}Data-${dataKeyRefId}.${mediaKeyRef}`;\r\n      newFormInputElement.name = `${mediaType}s.${mediaType}Data-${dataKeyRefId}.${mediaKeyRef}`;\r\n      newFormInputElement.type = `text`;\r\n      newFormInputElement.className = `${classNameForStyle}-text-input`;\r\n\r\n      newFormInputElement.onblur = (event) => {\r\n        formikConf.handleBlur(event);\r\n      };\r\n\r\n      newFormInputElement.onchange = (event) => {\r\n        console.log({ event });\r\n        const eventTyped = (event as unknown) as React.ChangeEvent<HTMLInputElement>;\r\n        formikConf.handleChange(event);\r\n        formikConf.handleBlur(event);\r\n        setFormPreviewData((previousFormPreviewData: any) => {\r\n          return {\r\n            ...previousFormPreviewData,\r\n            current: {\r\n              ...previousFormPreviewData[`current`],\r\n              data: {\r\n                ...previousFormPreviewData[`current`][`data`],\r\n                [mediaKeyRef]: eventTyped.target.value,\r\n              },\r\n            },\r\n          };\r\n        });\r\n      };\r\n      if (initialInputValue) {\r\n        newFormInputElement.value = initialInputValue;\r\n      }\r\n\r\n      setValidSchema((prevYupSchema: any) => {\r\n        let updatedSchema = createYupSchema({\r\n          schema: prevYupSchema,\r\n          config: {\r\n            id: {\r\n              mediaType: `${mediaType}s`,\r\n              dataRefId: `${mediaType}Data-${dataKeyRefId}`,\r\n              inputKeyRef: `${mediaKeyRef}`,\r\n            },\r\n            validationType: `string`,\r\n            validations: [\r\n              { type: `required`, params: `Please enter ${mediaKeyRef}` },\r\n            ],\r\n          },\r\n        });\r\n        return updatedSchema;\r\n      });\r\n\r\n      newFormElement = newFormInputElement;\r\n    } else if (whatType === `textInputWithSubIndex`) {\r\n      newFormElementsContainer.className = `${classNameForStyle}-text-input-container`;\r\n      newFormElementsContainer.id = `${mediaType}-${mediaKeyRef}-${dataKeyRefId}-subId-${generatedSubId}`;\r\n      newFormElementsRemoveButton.className = `${classNameForStyle}-text-input-remove-button`;\r\n\r\n      let newFormInputElement = document.createElement(\"input\");\r\n      newFormInputElement.id = `${mediaType}s.${mediaType}Data-${dataKeyRefId}.${mediaKeyRef}-${generatedSubId}`;\r\n      newFormInputElement.name = `${mediaType}s.${mediaType}Data-${dataKeyRefId}.${mediaKeyRef}-${generatedSubId}`;\r\n      newFormInputElement.type = `text`;\r\n      newFormInputElement.className = `${classNameForStyle}-text-input`;\r\n\r\n      newFormInputElement.onblur = (event) => {\r\n        formikConf.handleBlur(event);\r\n      };\r\n      newFormInputElement.onchange = (event) => {\r\n        let eventTyped = (event as unknown) as React.ChangeEvent<HTMLInputElement>;\r\n        let extractedValue = eventTyped.target.value;\r\n        let allRetrievedSubInputs = (eventTyped.target.parentNode?.parentNode\r\n          ?.childNodes as unknown) as Array<HTMLDivElement>;\r\n        let allRetrievedSubInputsConverted = Array.prototype.slice.call(\r\n          allRetrievedSubInputs\r\n        );\r\n\r\n        let retrievedElementIndex = allRetrievedSubInputsConverted.findIndex(\r\n          (element) =>\r\n            element.id ===\r\n            `${mediaType}-${mediaKeyRef}-${dataKeyRefId}-subId-${generatedSubId}`\r\n        );\r\n\r\n        let retrievedPreviousFormValuesForSubInputs: Array<string> = [];\r\n        for (let i = 0; i < allRetrievedSubInputsConverted.length; i++) {\r\n          retrievedPreviousFormValuesForSubInputs.push(\r\n            allRetrievedSubInputsConverted[i].childNodes[2][`value`]\r\n          );\r\n        }\r\n\r\n        if (retrievedElementIndex && retrievedElementIndex > 0) {\r\n          retrievedPreviousFormValuesForSubInputs.splice(\r\n            retrievedElementIndex,\r\n            1,\r\n            extractedValue\r\n          );\r\n        } else if (retrievedElementIndex === 0) {\r\n          if (allRetrievedSubInputsConverted.length > 1) {\r\n            retrievedPreviousFormValuesForSubInputs.shift();\r\n            retrievedPreviousFormValuesForSubInputs.unshift(extractedValue);\r\n          } else {\r\n            retrievedPreviousFormValuesForSubInputs = [`${extractedValue}`];\r\n          }\r\n        }\r\n\r\n        formikConf.setFieldValue(\r\n          `${mediaType}s.${mediaType}Data-${dataKeyRefId}.${mediaKeyRef}s`,\r\n          retrievedPreviousFormValuesForSubInputs\r\n        );\r\n\r\n        setFormPreviewData((previousFormPreviewData: any) => {\r\n          return {\r\n            ...previousFormPreviewData,\r\n            current: {\r\n              ...previousFormPreviewData[`current`],\r\n              data: {\r\n                ...previousFormPreviewData[`current`][`data`],\r\n                [`${mediaKeyRef}s`]: retrievedPreviousFormValuesForSubInputs,\r\n              },\r\n            },\r\n          };\r\n        });\r\n      };\r\n\r\n      if (initialInputValue) {\r\n        newFormInputElement.value = initialInputValue;\r\n      }\r\n\r\n      newFormElement = newFormInputElement;\r\n    } else if (whatType === `listInput`) {\r\n      newFormElementsContainer.className = `${classNameForStyle}-list-input-container`;\r\n      newFormElementsContainer.id = `${mediaType}-${mediaKeyRef}-${dataKeyRefId}-subId-${generatedSubId}`;\r\n      newFormElementsRemoveButton.className = `${classNameForStyle}-list-remove-button`;\r\n\r\n      let newFormListElement = document.createElement(\"li\");\r\n      newFormListElement.id = `${mediaType}-${mediaKeyRef}-input-id-${dataKeyRefId}-subId-${generatedSubId}`;\r\n      newFormListElement.className = `${classNameForStyle}-list`;\r\n\r\n      if (childElements) {\r\n        for (let i = 0; i < childElements.length; i++) {\r\n          let newFormListInputElement = document.createElement(\"input\");\r\n          newFormListInputElement.type = `radio`;\r\n          newFormListInputElement.className = `${classNameForStyle}-list-input-radio`;\r\n          newFormListInputElement.name = `${mediaType}s.${mediaType}Data-${dataKeyRefId}.${mediaKeyRef}`;\r\n          newFormListInputElement.value = `${childElements[i]}`;\r\n          newFormListInputElement.onchange = (event) => {\r\n            const eventTyped = (event as unknown) as React.ChangeEvent<HTMLInputElement>;\r\n            formikConf.handleChange(event);\r\n            formikConf.handleBlur(event);\r\n            setFormPreviewData((previousFormPreviewData: any) => {\r\n              return {\r\n                ...previousFormPreviewData,\r\n                current: {\r\n                  ...previousFormPreviewData[`current`],\r\n                  data: {\r\n                    ...previousFormPreviewData[`current`][`data`],\r\n                    [mediaKeyRef]: eventTyped.target.value,\r\n                  },\r\n                },\r\n              };\r\n            });\r\n          };\r\n\r\n          if (initialInputValue && childElements[i] === initialInputValue) {\r\n            newFormListInputElement.checked = true;\r\n          }\r\n\r\n          let newFormListInputElementLabel = document.createElement(\"div\");\r\n          newFormListInputElementLabel.className = `${classNameForStyle}-list-input-label`;\r\n          newFormListInputElementLabel.innerHTML = `${childElements[i]}`;\r\n\r\n          let newFormListInputElementContainer = document.createElement(\"div\");\r\n          newFormListInputElementContainer.className = `${classNameForStyle}-list-input-container`;\r\n          newFormListInputElementContainer.appendChild(newFormListInputElement);\r\n          newFormListInputElementContainer.appendChild(\r\n            newFormListInputElementLabel\r\n          );\r\n\r\n          newFormListElement.appendChild(newFormListInputElementContainer);\r\n        }\r\n      }\r\n\r\n      setValidSchema((prevYupSchema: any) => {\r\n        let updatedSchema = createYupSchema({\r\n          schema: prevYupSchema,\r\n          config: {\r\n            id: {\r\n              mediaType: `${mediaType}s`,\r\n              dataRefId: `${mediaType}Data-${dataKeyRefId}`,\r\n              inputKeyRef: `${mediaKeyRef}`,\r\n            },\r\n            validationType: `string`,\r\n            validations: [\r\n              { type: `required`, params: `Please enter ${mediaKeyRef}` },\r\n            ],\r\n          },\r\n        });\r\n        return updatedSchema;\r\n      });\r\n\r\n      newFormElement = newFormListElement;\r\n    } else if (whatType === `fileInput`) {\r\n      console.log(`file input created`);\r\n      newFormElementsContainer.className = `${classNameForStyle}-file-input-container`;\r\n      newFormElementsContainer.id = `${mediaType}-${mediaKeyRef}-${dataKeyRefId}`;\r\n      newFormElementsRemoveButton.className = `${classNameForStyle}-file-input-remove-button`;\r\n\r\n      let newFormFileInputElement = document.createElement(\"input\");\r\n      newFormFileInputElement.type = \"file\";\r\n      newFormFileInputElement.name = `${mediaType}s.${mediaType}Data-${dataKeyRefId}.${mediaKeyRef}`;\r\n      newFormFileInputElement.className = `${classNameForStyle}-file-input`;\r\n\r\n      newFormFileInputElement.onchange = (event) => {\r\n        console.log({ event });\r\n        const eventTyped = (event as unknown) as React.ChangeEvent<HTMLInputElement>;\r\n        let fileToURL = eventTyped[`target`][`files`]\r\n          ? URL.createObjectURL(eventTyped[`target`][`files`][0])\r\n          : undefined;\r\n        formikConf.setFieldValue(\r\n          `${mediaType}s.${mediaType}Data-${dataKeyRefId}.${mediaKeyRef}`,\r\n          fileToURL\r\n        );\r\n        formikConf.handleBlur(event);\r\n        setFormPreviewData((previousFormPreviewData: any) => {\r\n          return {\r\n            ...previousFormPreviewData,\r\n            current: {\r\n              ...previousFormPreviewData[`current`],\r\n              data: {\r\n                ...previousFormPreviewData[`current`][`data`],\r\n                [mediaKeyRef]: fileToURL,\r\n              },\r\n            },\r\n          };\r\n        });\r\n      };\r\n\r\n      if (initialInputValue) {\r\n        newFormFileInputElement.defaultValue = initialInputValue;\r\n      }\r\n\r\n      setValidSchema((prevYupSchema: any) => {\r\n        let updatedSchema = createYupSchema({\r\n          schema: prevYupSchema,\r\n          config: {\r\n            id: {\r\n              mediaType: `${mediaType}s`,\r\n              dataRefId: `${mediaType}Data-${dataKeyRefId}`,\r\n              inputKeyRef: `${mediaKeyRef}`,\r\n            },\r\n            validationType: `string`,\r\n            validations: [\r\n              { type: `required`, params: `Please enter ${mediaKeyRef}` },\r\n            ],\r\n          },\r\n        });\r\n        return updatedSchema;\r\n      });\r\n\r\n      newFormElement = newFormFileInputElement;\r\n    } else if (whatType === `inputsContainer`) {\r\n      newFormElementsContainer.className = `${classNameForStyle}-outter-inputs-container`;\r\n      newFormElementsContainer.id = `${mediaType}Data-${dataKeyRefId}`;\r\n      newFormElementsContainer.onmousedown = (event) => {\r\n        console.log({ focusEvent: event, storedRefs });\r\n        const allInputNodesRetrieved = (storedRefs[`${mediaType}sInputViewRef`][\r\n          `current`\r\n        ][`childNodes`] as unknown) as Array<HTMLDivElement>;\r\n        for (let g = 0; g < allInputNodesRetrieved[`length`]; g++) {\r\n          if (\r\n            allInputNodesRetrieved[g][`id`][`includes`](\r\n              `${mediaType}Data-${dataKeyRefId}`\r\n            )\r\n          ) {\r\n            const inputsNodesRetrieved =\r\n              allInputNodesRetrieved[g][`childNodes`][2][`childNodes`];\r\n            console.log({ inputsNodesRetrieved });\r\n            if (dataConfigObject) {\r\n              let dataConfig: any = { ...dataConfigObject };\r\n              let dataConfigKeys: Array<string> = Object.keys(dataConfig);\r\n              console.log({ inputsNodesRetrieved });\r\n              if (inputsNodesRetrieved && inputsNodesRetrieved[`length`] >= 0) {\r\n                for (let i = 0; i < inputsNodesRetrieved[`length`]; i++) {\r\n                  if (\r\n                    inputsNodesRetrieved[i][`childNodes`][2][`nodeName`] ===\r\n                    `INPUT`\r\n                  ) {\r\n                    const elementTyped = (inputsNodesRetrieved[i][\r\n                      `childNodes`\r\n                    ][2] as unknown) as HTMLInputElement;\r\n                    const nodeName = elementTyped[`name`];\r\n                    const foundMatchedIndex = dataConfigKeys[\r\n                      `findIndex`\r\n                    ]((key) => nodeName[`includes`](key));\r\n                    if (elementTyped[`type`] === `text`) {\r\n                      dataConfig = {\r\n                        ...dataConfig,\r\n                        [dataConfigKeys[foundMatchedIndex]]:\r\n                          elementTyped[`value`],\r\n                      };\r\n                    } else if (elementTyped[`type`] === `file`) {\r\n                      if (elementTyped[`files`]) {\r\n                        if (elementTyped[`files`][`length`] === 1) {\r\n                          const fileToURL = URL.createObjectURL(\r\n                            elementTyped[`files`][0]\r\n                          );\r\n                          dataConfig = {\r\n                            ...dataConfig,\r\n                            [dataConfigKeys[foundMatchedIndex]]: fileToURL,\r\n                          };\r\n                        } else if (elementTyped[`files`][`length`] > 1) {\r\n                          let filesToURLs: Array<string> = [];\r\n                          for (let f = 0; f < filesToURLs[`length`]; f++) {\r\n                            filesToURLs.push(\r\n                              URL.createObjectURL(elementTyped[`files`][f])\r\n                            );\r\n                          }\r\n                          dataConfig = {\r\n                            ...dataConfig,\r\n                            [dataConfigKeys[foundMatchedIndex]]: filesToURLs,\r\n                          };\r\n                        }\r\n                      } else {\r\n                        dataConfig = {\r\n                          ...dataConfig,\r\n                          [dataConfigKeys[foundMatchedIndex]]: undefined,\r\n                        };\r\n                      }\r\n                    }\r\n                  } else if (\r\n                    inputsNodesRetrieved[i][`childNodes`][2][`nodeName`] ===\r\n                    `LI`\r\n                  ) {\r\n                    const elementTyped = (inputsNodesRetrieved[i][\r\n                      `childNodes`\r\n                    ][2] as unknown) as HTMLLIElement;\r\n                    console.log({ elementTyped });\r\n                    // const nodeName = elementTyped[`name`];\r\n                    // const foundMatchedIndex = dataConfigKeys[`findIndex`]((key) =>\r\n                    //  nodeName[`includes`](key)\r\n                    // );\r\n                    // console.log({ foundMatchedIndex });\r\n                    let verifiedValues: Array<any> = [];\r\n                    for (\r\n                      let x = 0;\r\n                      x < elementTyped[`childNodes`][`length`];\r\n                      x++\r\n                    ) {\r\n                      let inputElementTyped = (elementTyped[`childNodes`][x][\r\n                        `childNodes`\r\n                      ][0] as unknown) as HTMLInputElement;\r\n                      if (\r\n                        inputElementTyped[`type`] === `checkbox` &&\r\n                        inputElementTyped[`checked`]\r\n                      ) {\r\n                        verifiedValues.push(inputElementTyped[`value`]);\r\n                      }\r\n                    }\r\n                    dataConfig = {\r\n                      ...dataConfig,\r\n                      [dataConfigKeys[i]]:\r\n                        verifiedValues[`length`] === 1\r\n                          ? verifiedValues[0]\r\n                          : verifiedValues,\r\n                    };\r\n                  } else if (\r\n                    inputsNodesRetrieved[i][`childNodes`][3][`nodeName`] ===\r\n                    `DIV`\r\n                  ) {\r\n                    const elementTyped = (inputsNodesRetrieved[i][\r\n                      `childNodes`\r\n                    ][3] as unknown) as HTMLDivElement;\r\n                    console.log({ elementTyped });\r\n                    const nodeId = elementTyped[`id`];\r\n                    const foundMatchedIndex = dataConfigKeys[\r\n                      `findIndex`\r\n                    ]((key) => nodeId[`includes`](key));\r\n                    console.log({ foundMatchedIndex });\r\n                    let inputsValuesHold = [];\r\n                    const retrievedInputsContainers =\r\n                      inputsNodesRetrieved[i][`childNodes`][3][`childNodes`];\r\n                    for (let o = 0; o < retrievedInputsContainers.length; o++) {\r\n                      let retrievedInputNode = (retrievedInputsContainers[o][\r\n                        `childNodes`\r\n                      ][2] as unknown) as HTMLInputElement;\r\n                      let retrievedInputValue = retrievedInputNode[`value`];\r\n                      inputsValuesHold.push(retrievedInputValue);\r\n                    }\r\n                    dataConfig = {\r\n                      ...dataConfig,\r\n                      [dataConfigKeys[foundMatchedIndex]]: inputsValuesHold,\r\n                    };\r\n                  }\r\n                }\r\n              }\r\n              handleCurrentMediaInputsSelectedStyle(\r\n                allInputNodesRetrieved,\r\n                `${mediaType}Data-${dataKeyRefId}`,\r\n                mediaType\r\n              );\r\n\r\n              setMediaDataIds((previousMediaDataIds: any) => {\r\n                return {\r\n                  ...previousMediaDataIds,\r\n                  [`current`]: {\r\n                    ...previousMediaDataIds[`current`],\r\n                    [`${mediaType}`]: `${mediaType}Data-${dataKeyRefId}`,\r\n                  },\r\n                };\r\n              });\r\n\r\n              setFormPreviewData((previousFormPreviewData) => {\r\n                return {\r\n                  ...previousFormPreviewData,\r\n                  current: {\r\n                    type: mediaType,\r\n                    data: dataConfig,\r\n                  },\r\n                };\r\n              });\r\n            }\r\n          }\r\n        }\r\n      };\r\n\r\n      newFormElementsRemoveButton.className = `${classNameForStyle}-inputs-remove-button`;\r\n\r\n      let newFormInputsContainerElement = document.createElement(\"div\");\r\n      newFormInputsContainerElement.id = `${mediaType}-${mediaKeyRef}-inputs-container-id-${dataKeyRefId}`;\r\n\r\n      newFormInputsContainerElement.className = `${classNameForStyle}-inner-inputs-container`;\r\n\r\n      if (childElements) {\r\n        for (let i = 0; i < childElements.length; i++) {\r\n          newFormInputsContainerElement.appendChild(childElements[i]);\r\n        }\r\n      }\r\n\r\n      newFormElement = newFormInputsContainerElement;\r\n    } else {\r\n      newFormElementsContainer.className = `${classNameForStyle}-unknown-element-container`;\r\n\r\n      let newFormUnknownElement = document.createElement(\"div\");\r\n      newFormUnknownElement.id = `${mediaType}:${mediaKeyRef}:unknown-element:id:${dataKeyRefId}`;\r\n\r\n      newFormUnknownElement.className = `${classNameForStyle}-unknown-element`;\r\n\r\n      newFormElement = newFormUnknownElement;\r\n    }\r\n\r\n    if (mediaKeyRef === `data`) {\r\n      newFormElementsRemoveButton.innerHTML = `-`;\r\n      newFormElementsRemoveButton.onclick = (event) => {\r\n        let eventTyped = (event as unknown) as React.ChangeEvent<HTMLInputElement>;\r\n        console.log({ eventTyped: eventTyped[`target`][`parentNode`] });\r\n\r\n        formikConf.setFieldValue(\r\n          `${mediaType}s.${mediaType}Data-${dataKeyRefId}`,\r\n          undefined\r\n        );\r\n\r\n        setValidSchema((prevSchema: any) => {\r\n          let updatedSchema = { ...prevSchema };\r\n          let updatedSchemaFields = updatedSchema[`fields`];\r\n          delete updatedSchemaFields[`${mediaType}s`][`fields`][\r\n            `${mediaType}Data-${dataKeyRefId}`\r\n          ];\r\n          console.log({ updatedSchemaFields });\r\n          let updatedSchemaFinalized = yup[`object`]()[`shape`]({\r\n            ...updatedSchemaFields,\r\n          });\r\n          return updatedSchemaFinalized;\r\n        });\r\n\r\n        eventTyped.target.parentNode?.parentNode?.removeChild(\r\n          eventTyped.target.parentNode\r\n        );\r\n        setFormPreviewData((previousFormPreviewData) => {\r\n          console.log({ inputsDeletionCallBack });\r\n          if (inputsDeletionCallBack) {\r\n            let dataReset = inputsDeletionCallBack();\r\n            console.log({ dataReset });\r\n            return {\r\n              ...previousFormPreviewData,\r\n              [`current`]: {\r\n                [`type`]: mediaType,\r\n                [`data`]: dataReset,\r\n              },\r\n            };\r\n          } else {\r\n            return previousFormPreviewData;\r\n          }\r\n        });\r\n        setMediaDataIds((previousMediaDataIds) => {\r\n          let idsConfig = {\r\n            ...previousMediaDataIds,\r\n            [`current`]: {\r\n              ...previousMediaDataIds[`current`],\r\n              [mediaType]: ``,\r\n            },\r\n          };\r\n          return idsConfig;\r\n        });\r\n      };\r\n    } else {\r\n      newFormElementsRemoveButton.innerHTML = `-`;\r\n      newFormElementsRemoveButton.onclick = (event) => {\r\n        let eventTyped = (event as unknown) as React.ChangeEvent<HTMLInputElement>;\r\n\r\n        let allRetrievedSubInputs = (eventTyped.target.parentNode?.parentNode\r\n          ?.childNodes as unknown) as Array<HTMLDivElement>;\r\n\r\n        let allRetrievedSubInputsConverted = Array.prototype.slice.call(\r\n          allRetrievedSubInputs\r\n        );\r\n\r\n        let retrievedElementIndex = allRetrievedSubInputsConverted.findIndex(\r\n          (element) =>\r\n            element.id ===\r\n            `${mediaType}-${mediaKeyRef}-${dataKeyRefId}-subId-${generatedSubId}`\r\n        );\r\n\r\n        let updatedSubInputsValues: Array<string> = [];\r\n\r\n        allRetrievedSubInputs.forEach((referenceElement) => {\r\n          let typedSubInputElement = (referenceElement\r\n            .childNodes[2] as unknown) as HTMLInputElement;\r\n          updatedSubInputsValues.push(typedSubInputElement.value);\r\n        });\r\n\r\n        if (updatedSubInputsValues.length >= 1) {\r\n          if (\r\n            retrievedElementIndex > 0 &&\r\n            retrievedElementIndex < updatedSubInputsValues.length - 1\r\n          ) {\r\n            updatedSubInputsValues.splice(retrievedElementIndex, 1);\r\n          } else if (\r\n            retrievedElementIndex === updatedSubInputsValues.length - 1 &&\r\n            retrievedElementIndex !== 0\r\n          ) {\r\n            updatedSubInputsValues.pop();\r\n          } else if (retrievedElementIndex === 0) {\r\n            updatedSubInputsValues.shift();\r\n          }\r\n        }\r\n\r\n        formikConf.setFieldValue(\r\n          `${mediaType}s.${mediaType}Data-${dataKeyRefId}.${mediaKeyRef}s`,\r\n          updatedSubInputsValues\r\n        );\r\n\r\n        console.log({\r\n          subIndexCheckForRemoving: allRetrievedSubInputs.length - 1,\r\n        });\r\n\r\n        setValidSchema((prevYupSchema: any) => {\r\n          let updatedSchema = createYupSchema({\r\n            schema: prevYupSchema,\r\n            config: {\r\n              id: {\r\n                mediaType: `${mediaType}s`,\r\n                dataRefId: `${mediaType}Data-${dataKeyRefId}`,\r\n                inputKeyRef: `${mediaKeyRef}s`,\r\n              },\r\n              validationType: `array`,\r\n              validations: [\r\n                {\r\n                  type: `of`,\r\n                  params: yup.string().required(),\r\n                },\r\n                {\r\n                  type: `length`,\r\n                  params: allRetrievedSubInputs.length - 1,\r\n                },\r\n              ],\r\n            },\r\n          });\r\n          return updatedSchema;\r\n        });\r\n\r\n        console.log({ allRetrievedSubInputs, updatedSubInputsValues });\r\n\r\n        eventTyped.target.parentNode?.parentNode?.removeChild(\r\n          eventTyped.target.parentNode\r\n        );\r\n      };\r\n    }\r\n\r\n    if (whatType === `textInputWithSubIndex`) {\r\n      newFormElementsContainer.append(newFormElementsRemoveButton);\r\n      newFormElementsContainer.appendChild(newFormElementLabel);\r\n      newFormElementsContainer.appendChild(newFormElement);\r\n    } else {\r\n      newFormElementsContainer.appendChild(newFormElementLabel);\r\n      newFormElementsContainer.append(newFormElementsRemoveButton);\r\n      newFormElementsContainer.appendChild(newFormElement);\r\n    }\r\n    return newFormElementsContainer;\r\n  };\r\n\r\n  // Handle addition of new form inputs\r\n  const addNewInputs = (\r\n    whichMediaType: string,\r\n    inputElementsKeyRefs: Array<{\r\n      key: string;\r\n      typeOfInput: string;\r\n      childrenElements?: Array<any>;\r\n      initialValue?: any;\r\n    }>,\r\n    inputsDeletionCallback: Function,\r\n    elementToAppendTo?: HTMLElement,\r\n    inputId?: string\r\n  ) => {\r\n    let newFormInputs;\r\n\r\n    let newFormInputElementsHold = [];\r\n\r\n    let newFormInputElementsForSubInputsHold: Record<string, Array<any>> = {};\r\n\r\n    inputElementsKeyRefs.forEach((keyRef) => {\r\n      if (keyRef.typeOfInput === `textInputWithSubIndex`) {\r\n        newFormInputElementsForSubInputsHold = {\r\n          ...newFormInputElementsForSubInputsHold,\r\n          [`${keyRef.key}`]: [],\r\n        };\r\n      }\r\n    });\r\n\r\n    let newSubInputsId = v4();\r\n\r\n    let dataConfigObject: object = {};\r\n\r\n    for (let i = 0; i < inputElementsKeyRefs.length; i++) {\r\n      /*\r\n      let mediaKeyRefFirstLetterCapitalized =\r\n        inputElementsKeyRefs[i].key[0].toUpperCase() +\r\n        inputElementsKeyRefs[i].key.slice(1);\r\n        */\r\n\r\n      if (inputElementsKeyRefs[i].typeOfInput === `textInputWithSubIndex`) {\r\n        newFormInputElementsForSubInputsHold[\r\n          `${inputElementsKeyRefs[i].key}`\r\n        ].push(\r\n          newFormElement(\r\n            `${inputElementsKeyRefs[i].typeOfInput}`,\r\n            `${whichMediaType}`,\r\n            `${inputElementsKeyRefs[i].key}`,\r\n            inputId ? inputId : newSubInputsId,\r\n            `${whichMediaType}-${inputElementsKeyRefs[i].key}`,\r\n            undefined,\r\n            undefined,\r\n            inputElementsKeyRefs[i][`initialValue`]\r\n              ? inputElementsKeyRefs[i][`initialValue`]\r\n              : undefined\r\n          )\r\n        );\r\n      } else if (inputElementsKeyRefs[i].typeOfInput === `textInput`) {\r\n        newFormInputElementsHold.push(\r\n          newFormElement(\r\n            `${inputElementsKeyRefs[i].typeOfInput}`,\r\n            `${whichMediaType}`,\r\n            `${inputElementsKeyRefs[i].key}`,\r\n            inputId ? inputId : newSubInputsId,\r\n            `${whichMediaType}-${inputElementsKeyRefs[i].key}`,\r\n            undefined,\r\n            undefined,\r\n            inputElementsKeyRefs[i][`initialValue`]\r\n              ? inputElementsKeyRefs[i][`initialValue`]\r\n              : undefined\r\n          )\r\n        );\r\n        dataConfigObject = {\r\n          ...dataConfigObject,\r\n          [`${inputElementsKeyRefs[i].key}`]: undefined,\r\n        };\r\n      } else if (inputElementsKeyRefs[i].typeOfInput === `fileInput`) {\r\n        newFormInputElementsHold.push(\r\n          newFormElement(\r\n            `${inputElementsKeyRefs[i].typeOfInput}`,\r\n            `${whichMediaType}`,\r\n            `${inputElementsKeyRefs[i].key}`,\r\n            inputId ? inputId : newSubInputsId,\r\n            `${whichMediaType}-${inputElementsKeyRefs[i].key}`,\r\n            undefined,\r\n            undefined,\r\n            inputElementsKeyRefs[i][`initialValue`]\r\n              ? inputElementsKeyRefs[i][`initialValue`]\r\n              : undefined\r\n          )\r\n        );\r\n        dataConfigObject = {\r\n          ...dataConfigObject,\r\n          [`${inputElementsKeyRefs[i].key}`]: undefined,\r\n        };\r\n      } else if (inputElementsKeyRefs[i].typeOfInput === `listInput`) {\r\n        newFormInputElementsHold.push(\r\n          newFormElement(\r\n            `${inputElementsKeyRefs[i].typeOfInput}`,\r\n            `${whichMediaType}`,\r\n            `${inputElementsKeyRefs[i].key}`,\r\n            inputId ? inputId : newSubInputsId,\r\n            `${whichMediaType}-${inputElementsKeyRefs[i].key}`,\r\n            inputElementsKeyRefs[i].childrenElements,\r\n            undefined,\r\n            inputElementsKeyRefs[i][`initialValue`]\r\n              ? inputElementsKeyRefs[i][`initialValue`]\r\n              : undefined\r\n          )\r\n        );\r\n        dataConfigObject = {\r\n          ...dataConfigObject,\r\n          [`${inputElementsKeyRefs[i].key}`]: undefined,\r\n        };\r\n      } else {\r\n        setValidSchema((prevYupSchema: any) => {\r\n          let updatedSchema = createYupSchema({\r\n            schema: prevYupSchema,\r\n            config: {\r\n              id: {\r\n                mediaType: `${whichMediaType}s`,\r\n                dataRefId: `${whichMediaType}Data-${\r\n                  inputId ? inputId : newSubInputsId\r\n                }`,\r\n                inputKeyRef: `${inputElementsKeyRefs[i].key}`,\r\n              },\r\n              validationType: `string`,\r\n              validations: [\r\n                {\r\n                  type: `required`,\r\n                  params: `Please enter ${inputElementsKeyRefs[i].key}`,\r\n                },\r\n              ],\r\n            },\r\n          });\r\n          return updatedSchema;\r\n        });\r\n        dataConfigObject = {\r\n          ...dataConfigObject,\r\n          [`${inputElementsKeyRefs[i].key}`]: undefined,\r\n        };\r\n      }\r\n    }\r\n\r\n    for (let sI in newFormInputElementsForSubInputsHold) {\r\n      let subInputsLength = newFormInputElementsForSubInputsHold[sI].length;\r\n      console.log({ subInputsLength });\r\n      if (subInputsLength > 0) {\r\n        dataConfigObject = { ...dataConfigObject, [`${sI}s`]: undefined };\r\n\r\n        let initialSubInputsFragment = document.createElement(\"div\");\r\n        initialSubInputsFragment.className = `elementAdjustmentsForSubInputs`;\r\n\r\n        let addSubInputButton = document.createElement(\"div\");\r\n        addSubInputButton.className = `${whichMediaType}-add-${sI}-button`;\r\n        addSubInputButton.innerHTML = `+`;\r\n        addSubInputButton.onclick = (event) => {\r\n          let eventTyped = (event as unknown) as React.ChangeEvent<HTMLInputElement>;\r\n\r\n          const retrievingNewSubIndex = () => {\r\n            let clarifiedNewSubIndex =\r\n              eventTyped.target.parentNode?.childNodes[3].childNodes.length;\r\n            return clarifiedNewSubIndex;\r\n          };\r\n          const retrievedNewSubIndex = retrievingNewSubIndex();\r\n          console.log({\r\n            subIndexCheckForAdding: retrievedNewSubIndex\r\n              ? retrievedNewSubIndex + 1\r\n              : -1,\r\n          });\r\n\r\n          let addedSubInputElement = newFormElement(\r\n            `textInputWithSubIndex`,\r\n            `${whichMediaType}`,\r\n            `${sI}`,\r\n            inputId ? inputId : newSubInputsId,\r\n            `${whichMediaType}-${sI}`\r\n          );\r\n\r\n          setValidSchema((prevYupSchema: any) => {\r\n            let updatedSchema = createYupSchema({\r\n              schema: prevYupSchema,\r\n              config: {\r\n                id: {\r\n                  mediaType: `${whichMediaType}s`,\r\n                  dataRefId: `${whichMediaType}Data-${\r\n                    inputId ? inputId : newSubInputsId\r\n                  }`,\r\n                  inputKeyRef: `${sI}s`,\r\n                },\r\n                validationType: `array`,\r\n                validations: [\r\n                  {\r\n                    type: `of`,\r\n                    params: yup.string().required(),\r\n                  },\r\n                  {\r\n                    type: `length`,\r\n                    params: retrievedNewSubIndex ? retrievedNewSubIndex + 1 : 1,\r\n                  },\r\n                ],\r\n              },\r\n            });\r\n            console.log(`checking if logic is firing for adding subInputs`, {\r\n              retrievedNewSubIndex,\r\n              updatedSchema,\r\n            });\r\n            return updatedSchema;\r\n          });\r\n\r\n          eventTyped.target.parentNode?.childNodes[3].appendChild(\r\n            addedSubInputElement\r\n          );\r\n\r\n          addedSubInputElement.scrollIntoView(false);\r\n        };\r\n\r\n        let initialSubInputs = newFormElement(\r\n          `inputsContainer`,\r\n          `${whichMediaType}`,\r\n          `${sI}s`,\r\n          inputId ? inputId : newSubInputsId,\r\n          `${whichMediaType}-${sI}s`,\r\n          newFormInputElementsForSubInputsHold[sI]\r\n        );\r\n\r\n        initialSubInputs.firstChild?.after(addSubInputButton);\r\n\r\n        newFormInputElementsHold.push(initialSubInputs);\r\n\r\n        setValidSchema((prevYupSchema: any) => {\r\n          let updatedSchema = createYupSchema({\r\n            schema: prevYupSchema,\r\n            config: {\r\n              id: {\r\n                mediaType: `${whichMediaType}s`,\r\n                dataRefId: `${whichMediaType}Data-${\r\n                  inputId ? inputId : newSubInputsId\r\n                }`,\r\n                inputKeyRef: `${sI}s`,\r\n              },\r\n              validationType: `array`,\r\n              validations: [\r\n                {\r\n                  type: `of`,\r\n                  params: yup.string().required(),\r\n                },\r\n                {\r\n                  type: `length`,\r\n                  params: subInputsLength,\r\n                },\r\n              ],\r\n            },\r\n          });\r\n          return updatedSchema;\r\n        });\r\n      }\r\n    }\r\n\r\n    console.log({ inputsDeletionCallBackp1: inputsDeletionCallback() });\r\n\r\n    newFormInputs = newFormElement(\r\n      `inputsContainer`,\r\n      `${whichMediaType}`,\r\n      `data`,\r\n      inputId ? inputId : newSubInputsId,\r\n      `${whichMediaType}`,\r\n      newFormInputElementsHold,\r\n      dataConfigObject,\r\n      undefined,\r\n      inputsDeletionCallback\r\n    );\r\n\r\n    if (elementToAppendTo) {\r\n      elementToAppendTo.appendChild(newFormInputs);\r\n      newFormInputs.scrollIntoView(false);\r\n    }\r\n    return {\r\n      id: `${whichMediaType}Data-${inputId ? inputId : newSubInputsId}`,\r\n      inputs: newFormInputs,\r\n    };\r\n  };\r\n\r\n  // Declare function for switching between mini forms\r\n  const switchMediaMiniForm = (switchTo: string) => {\r\n    for (let x in storedRefs) {\r\n      let checkedIfMiniForm = RegExp(`MiniForm`).test(x);\r\n      if (checkedIfMiniForm) {\r\n        let checkedIfFormMatches = RegExp(switchTo).test(x);\r\n        console.log({ storedRefs, x });\r\n        if (checkedIfFormMatches) {\r\n          storedRefs[x].current.style.display = `flex`;\r\n        } else {\r\n          storedRefs[x].current.style.display = `none`;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle styling of currently selected media data inputs\r\n  const handleCurrentMediaInputsSelectedStyle = (\r\n    childNodesForStyling: Array<HTMLDivElement>,\r\n    selectedChildId: string,\r\n    mediaType: string\r\n  ) => {\r\n    for (let q = 0; q < childNodesForStyling.length; q++) {\r\n      let childNodeTyped = (childNodesForStyling[\r\n        q\r\n      ] as unknown) as HTMLDivElement;\r\n      let childNodeLabelElementTyped = (childNodeTyped[\r\n        `childNodes`\r\n      ][0] as unknown) as HTMLDivElement;\r\n      if (childNodeTyped.id.includes(selectedChildId)) {\r\n        childNodeTyped.style.backgroundColor = `blue`;\r\n        childNodeLabelElementTyped.className = `media-selected-label`;\r\n      } else {\r\n        childNodeTyped.style.backgroundColor = `black`;\r\n        childNodeLabelElementTyped.className = `${mediaType}-label`;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Hanlde creation and updates to form yup validation schema\r\n  const createYupSchema = (opts?: {\r\n    schema: any;\r\n    config: {\r\n      id: { mediaType: string; dataRefId: string; inputKeyRef: string };\r\n      validationType: any;\r\n      validations: Array<{ type: string; params: any }>;\r\n    };\r\n  }) => {\r\n    const yupv2 = yup as any;\r\n\r\n    if (opts) {\r\n      let updatedSchema = { ...opts[`schema`] };\r\n      let updatedSchemaFields = updatedSchema[`fields`];\r\n      const { id, validationType, validations } = opts[`config`];\r\n      if (!yupv2[validationType]) {\r\n        return updatedSchema;\r\n      }\r\n      let validator = yupv2[validationType]();\r\n      validations.forEach((validation) => {\r\n        const { type, params } = validation;\r\n        if (!validator[type]) {\r\n          return;\r\n        }\r\n        validator = validator[type](params);\r\n      });\r\n\r\n      updatedSchemaFields[id[`mediaType`]] = yup.object().shape(\r\n        updatedSchemaFields[id[`mediaType`]] &&\r\n          updatedSchemaFields[id[`mediaType`]][`fields`]\r\n          ? {\r\n              ...updatedSchemaFields[id[`mediaType`]][`fields`],\r\n              [id[`dataRefId`]]: yup.object().shape(\r\n                updatedSchemaFields[id[`mediaType`]][`fields`][\r\n                  id[`dataRefId`]\r\n                ] &&\r\n                  updatedSchemaFields[id[`mediaType`]][`fields`][\r\n                    id[`dataRefId`]\r\n                  ][`fields`]\r\n                  ? {\r\n                      ...updatedSchemaFields[id[`mediaType`]][`fields`][\r\n                        id[`dataRefId`]\r\n                      ][`fields`],\r\n                      [id[`inputKeyRef`]]: validator,\r\n                    }\r\n                  : {\r\n                      [id[`inputKeyRef`]]: validator,\r\n                    }\r\n              ),\r\n            }\r\n          : {\r\n              [id[`dataRefId`]]: yup.object().shape({\r\n                [id[`inputKeyRef`]]: validator,\r\n              }),\r\n            }\r\n      );\r\n\r\n      let updatedSchemaFinalized = yup[`object`]()[`shape`]({\r\n        ...updatedSchemaFields,\r\n      });\r\n      return updatedSchemaFinalized;\r\n    }\r\n  };\r\n\r\n  // Configurations for form\r\n  const formikConf = useFormik({\r\n    initialValues: initialFormValues,\r\n    validationSchema: validSchema,\r\n    onSubmit: (props) => {\r\n      handleFormSubmission({ ...props });\r\n    },\r\n  });\r\n\r\n  // Handle incoming data for form\r\n  React.useEffect(() => {\r\n    if (dataForForm[`forId`] !== `` && dataForForm[`forId`] !== undefined) {\r\n      if (dataForForm[`forId`][`includes`](`forStorage`)) {\r\n        console.log(`includes for storage`);\r\n        let dataId = dataForForm[`forId`];\r\n        let idExtracted = dataId.slice(11);\r\n        let extractedKey = dataId.substring(11, dataId.lastIndexOf(`Data`));\r\n        console.log({ idExtracted, extractedKey, dataForForm });\r\n        formikConf.setFieldValue(\r\n          `${extractedKey}s.${idExtracted}.${dataForForm[`forInput`]}`,\r\n          dataForForm[`inputValue`]\r\n        );\r\n        setFormPreviewData((previousFormPreviewData) => {\r\n          console.log({\r\n            previousFormPreviewDataCheckText: previousFormPreviewData,\r\n          });\r\n          return {\r\n            ...previousFormPreviewData,\r\n            stored: {\r\n              ...previousFormPreviewData[`stored`],\r\n              [`${extractedKey}s`]: {\r\n                ...previousFormPreviewData[`stored`][`${extractedKey}s`],\r\n                [`${idExtracted}`]: {\r\n                  ...previousFormPreviewData[`stored`][`${extractedKey}s`][\r\n                    `${idExtracted}`\r\n                  ],\r\n                  [`${dataForForm[`forInput`]}`]: dataForForm[`inputValue`],\r\n                },\r\n              },\r\n            },\r\n          };\r\n        });\r\n      }\r\n      if (dataForForm[`forId`][`includes`](`freshForm`)) {\r\n        setExtraHeaderOptions(() => {\r\n          return (\r\n            <div\r\n              className={\r\n                styles.extraHeaderOptionFreshFormBackToApiFrontPageButton\r\n              }\r\n              onClick={(event) => {\r\n                dataForForm[`inputValue`][`resetData`]();\r\n                dataForForm[`inputValue`][`backToApi`]();\r\n                setExtraHeaderOptions(() => {\r\n                  return <></>;\r\n                });\r\n              }}\r\n            >{`CANCEL NEW IDEA`}</div>\r\n          );\r\n        });\r\n      } else if (dataForForm[`forId`][`includes`](`DataAnnihilation`)) {\r\n        console.log(`Data annihilation initiated`);\r\n        let forValidSchema = {};\r\n        initialInputs.forEach((values) => {\r\n          formikConf.setFieldValue(`test.${values.name}`, ``);\r\n          forValidSchema = {\r\n            ...forValidSchema,\r\n            [`${values.name}`]: yup.string().required(),\r\n          };\r\n        });\r\n\r\n        setValidSchema((prevValidSchema: any) => {\r\n          console.log({ prevValidSchemaForDataAnnihilation: prevValidSchema });\r\n          const schemaReset = yup.object().shape({\r\n            test: yup.object().shape(forValidSchema),\r\n          });\r\n          return schemaReset;\r\n        });\r\n\r\n        mediaInputsNav.forEach((values) => {\r\n          formikConf.setFieldValue(\r\n            `${values.mediaType}s`,\r\n            dataForForm[`inputValue`]\r\n          );\r\n        });\r\n      } else if (dataForForm[`forId`][`includes`](`fetchedProjectData`)) {\r\n        console.log(`fetched project data for form process initiated`, {\r\n          dataForForm,\r\n        });\r\n\r\n        mediaMiniFormInputs.forEach((values) => {\r\n          for (let k in dataForForm[`inputValue`][`${values.mediaType}s`]) {\r\n            let dataExtracted =\r\n              dataForForm[`inputValue`][`${values.mediaType}s`][k];\r\n            let configgedInputOpts = values.inputsOpts.map((opts) => {\r\n              let retrievedIndexedData =\r\n                dataExtracted[\r\n                  opts.typeOfInput === `textInputWithSubIndex`\r\n                    ? `${opts.key}s`\r\n                    : opts.key\r\n                ];\r\n              return {\r\n                ...opts,\r\n                initialValue:\r\n                  typeof retrievedIndexedData === `object`\r\n                    ? retrievedIndexedData[0]\r\n                    : retrievedIndexedData,\r\n              };\r\n            });\r\n            const { id } = addNewInputs(\r\n              `${values.mediaType}`,\r\n              configgedInputOpts,\r\n              values.inputsDeletionCallback,\r\n              storedRefs[`${values.mediaType}sInputViewRef`].current,\r\n              dataExtracted[`id`]\r\n            );\r\n          }\r\n        });\r\n        console.log({ formikConfForFetchedDataP1: formikConf, validSchema });\r\n\r\n        initialInputs.forEach((values) => {\r\n          formikConf.setFieldValue(\r\n            `test.${values.name}`,\r\n            dataForForm[`inputValue`][`test`][`${values.name}`]\r\n          );\r\n        });\r\n\r\n        mediaMiniFormInputs.forEach((values) => {\r\n          formikConf.setFieldValue(\r\n            `${values.mediaType}s`,\r\n            dataForForm[`inputValue`][`${values.mediaType}s`]\r\n          );\r\n        });\r\n        console.log({ formikConfForFetchedDataP2: formikConf });\r\n        setExtraHeaderOptions(() => {\r\n          return (\r\n            <div\r\n              className={\r\n                styles.extraHeaderOptionFetchedProjectDataBackToFullPreviewPageButton\r\n              }\r\n              onClick={(event) => {\r\n                setFormPreviewData((previousFormPreviewData) => {\r\n                  return {\r\n                    ...previousFormPreviewData,\r\n                    [`current`]: {\r\n                      ...previousFormPreviewData[`current`],\r\n                      [`type`]: `viewExistingProject`,\r\n                      [`data`]: dataForForm[`inputValue`],\r\n                    },\r\n                  };\r\n                });\r\n                dataForForm[`inputValue`][`resetData`](true, true);\r\n                setExtraHeaderOptions(() => {\r\n                  return <></>;\r\n                });\r\n              }}\r\n            >{`CANCEL EDIT`}</div>\r\n          );\r\n        });\r\n\r\n        setFormPreviewData((previousFormPreviewData) => {\r\n          return {\r\n            ...previousFormPreviewData,\r\n            [`current`]: {\r\n              ...previousFormPreviewData[`current`],\r\n              [`type`]: `formFilledForFetchedProject`,\r\n            },\r\n          };\r\n        });\r\n      }\r\n    }\r\n  }, [dataForForm]);\r\n\r\n  // Handle component return view\r\n  return (\r\n    <div className={styles.formEmbedder}>\r\n      <form onSubmit={formikConf.handleSubmit}>\r\n        <div\r\n          ref={storedRefs[`innerFormDisplayRef`]}\r\n          className={styles.innerFormMainDisplay}\r\n          style={styles.innerFormDisplaySupport}\r\n        >\r\n          <div className={styles[`formOptionsContainer`]}>\r\n            <div className={styles.formDataInputsHeader}>\r\n              {extraHeaderOptions}\r\n              <button\r\n                type={`submit`}\r\n                className={styles.innerFormSubmitButton}\r\n              >{`Submit`}</button>\r\n            </div>\r\n            <div className={styles[`formOptionsInitialInputs`]}>\r\n              {initialInputs.map((values) => {\r\n                return (\r\n                  <input\r\n                    name={`test.${values.name}`}\r\n                    placeholder={`${values.name.toUpperCase()}`}\r\n                    className={styles.anIdeaTitle}\r\n                    type={values.inputType}\r\n                    value={formikConf.values.test[`${values.name}`]}\r\n                    onChange={(event) => {\r\n                      formikConf.handleChange(event);\r\n                      formikConf.handleBlur(event);\r\n                    }}\r\n                    onBlur={formikConf.handleBlur}\r\n                    autoComplete={\"off\"}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n            <div className={styles.mediaSelectionNavDisplay}>\r\n              {mediaInputsNav.map((values) => {\r\n                return (\r\n                  <div\r\n                    className={styles.mediaSelectionNavButton}\r\n                    onClick={(event) => {\r\n                      switchMediaMiniForm(`${values.mediaType}s`);\r\n                      setFormPreviewData((previousMediaPreviewData) => {\r\n                        const fetchingMediaPreviewData = () => {\r\n                          if (\r\n                            mediaDataIds[`current`][`${values.mediaType}`] !==\r\n                              `` &&\r\n                            mediaDataIds[`current`][`${values.mediaType}`] !==\r\n                              -1\r\n                          ) {\r\n                            return {\r\n                              ...previousMediaPreviewData,\r\n                              current: {\r\n                                type: `${values.mediaType}`,\r\n                                data:\r\n                                  formikConf[`values`][`${values.mediaType}s`][\r\n                                    mediaDataIds[`current`][\r\n                                      `${values.mediaType}`\r\n                                    ]\r\n                                  ],\r\n                              },\r\n                            };\r\n                          } else {\r\n                            return previousMediaPreviewData;\r\n                          }\r\n                        };\r\n                        const fetchedMediaPreviewData = fetchingMediaPreviewData();\r\n                        return fetchedMediaPreviewData;\r\n                      });\r\n                    }}\r\n                  >{`${values.buttonText}`}</div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          {mediaMiniFormInputs.map((values) => {\r\n            return (\r\n              <div\r\n                ref={storedRefs[`${values.mediaType}sMiniForm`]}\r\n                className={styles.innerFormSectionContainer}\r\n              >\r\n                <button\r\n                  type={`button`}\r\n                  className={styles.innerFormAddInputButton}\r\n                  onClick={(event) => {\r\n                    const { id } = addNewInputs(\r\n                      `${values.mediaType}`,\r\n                      values.inputsOpts,\r\n                      values.inputsDeletionCallback,\r\n                      storedRefs[`${values.mediaType}sInputViewRef`].current\r\n                    );\r\n                    const eventTyped = (event as unknown) as React.ChangeEvent<HTMLButtonElement>;\r\n                    const parentNodeRetrieved = (eventTyped[`currentTarget`][\r\n                      `parentNode`\r\n                    ] as unknown) as HTMLDivElement;\r\n                    const inputsContainerRetrieved = (parentNodeRetrieved[\r\n                      `childNodes`\r\n                    ][1][`childNodes`] as unknown) as Array<HTMLDivElement>;\r\n\r\n                    handleCurrentMediaInputsSelectedStyle(\r\n                      inputsContainerRetrieved,\r\n                      id,\r\n                      values.mediaType\r\n                    );\r\n                    setMediaDataIds((previousMediaDataIds: any) => {\r\n                      return {\r\n                        ...previousMediaDataIds,\r\n                        [`current`]: {\r\n                          ...previousMediaDataIds[`current`],\r\n                          [`${values.mediaType}`]: id,\r\n                        },\r\n                      };\r\n                    });\r\n                    setFormPreviewData((previousFormPreviewData) => {\r\n                      return {\r\n                        ...previousFormPreviewData,\r\n                        current: {\r\n                          type: `${values.mediaType}`,\r\n                          data:\r\n                            formikConf[`values`][`${values.mediaType}s`][id],\r\n                        },\r\n                      };\r\n                    });\r\n                  }}\r\n                >{`${values.addButtonText}`}</button>\r\n                <div\r\n                  ref={storedRefs[`${values.mediaType}sInputViewRef`]}\r\n                  className={styles.innerFormSectionInputs}\r\n                ></div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst API: React.FC = () => {\r\n  // Deconstruct from useAuth0\r\n  const { isAuthenticated } = useAuth0();\r\n  // Handle screen size detection and changes\r\n  const [screenHeight, setScreenHeight] = React.useState(() => {\r\n    let fetchedScreenHeight = Dimensions.get(\"window\").height;\r\n    return fetchedScreenHeight;\r\n  });\r\n  const [screenWidth, setScreenWidth] = React.useState(() => {\r\n    let fetchedScreenWidth = Dimensions.get(\"window\").width;\r\n    return fetchedScreenWidth;\r\n  });\r\n\r\n  $(window).on(\"resize\", () => {\r\n    setScreenHeight(() => {\r\n      let fetchedScreenHeight = Dimensions.get(\"window\").height;\r\n      return fetchedScreenHeight;\r\n    });\r\n    setScreenWidth(() => {\r\n      let fetchedScreenWidth = Dimensions.get(\"window\").width;\r\n      return fetchedScreenWidth;\r\n    });\r\n  });\r\n\r\n  // Handle screen size changes\r\n  React.useEffect(() => {\r\n    let updatedHeightConfig = {\r\n      ...styles,\r\n      mainDisplaySupportStyle: {\r\n        ...styles.mainDisplaySupportStyle,\r\n        height: `${Dimensions[`get`](`window`)[`height`]}px`,\r\n      },\r\n      innerFormDisplaySupport: {\r\n        ...styles.innerFormDisplaySupport,\r\n        borderWidth:\r\n          formPreviewData[`current`][`type`] === `allNewData` ||\r\n          formPreviewData[`current`][`type`] === `apiFrontPage` ||\r\n          formPreviewData[`current`][`type`] === `viewExistingProject` ||\r\n          formPreviewData[`current`][`type`] === `reCheck`\r\n            ? 0\r\n            : 2,\r\n        height:\r\n          formPreviewData[`current`][`type`] === `allNewData` ||\r\n          formPreviewData[`current`][`type`] === `apiFrontPage` ||\r\n          formPreviewData[`current`][`type`] === `viewExistingProject` ||\r\n          formPreviewData[`current`][`type`] === `reCheck`\r\n            ? `0%`\r\n            : `${(screenHeight / 100) * 15 - 2}px`,\r\n      },\r\n      outterMediaPreviewDisplaySupport: {\r\n        ...styles.outterMediaPreviewDisplaySupport,\r\n        height:\r\n          formPreviewData[`current`][`type`] === `allNewData` ||\r\n          formPreviewData[`current`][`type`] === `apiFrontPage` ||\r\n          formPreviewData[`current`][`type`] === `viewExistingProject` ||\r\n          formPreviewData[`current`][`type`] === `reCheck`\r\n            ? `${(Dimensions[`get`](`window`)[`height`] / 100) * 95}px`\r\n            : `${(screenHeight / 100) * 80}px`,\r\n      },\r\n    };\r\n    setStyles(updatedHeightConfig);\r\n  }, [screenHeight, screenWidth]);\r\n\r\n  // Declare stylesheet for manipulation\r\n  const [styles, setStyles] = React.useState(() => {\r\n    return {\r\n      mainDisplay: styles2.mainDisplay,\r\n      mainDisplaySupportClass: `mainAPIDisplaySupportClass`,\r\n      mainDisplaySupportStyle: {\r\n        width: `100%`,\r\n        height: `${screenHeight}px`,\r\n      },\r\n      [`headerBarForAPI`]: `headerBarForAPI`,\r\n      [`headerBarForAPISupport`]: {\r\n        [`height`]: `${(screenHeight / 100) * 5}px`,\r\n      },\r\n      formEmbedder: `formEmbedder`,\r\n      innerFormMainDisplay: `innerFormMainDisplay`,\r\n      innerFormDisplaySupport: {\r\n        borderWidth: 0,\r\n        width: `100%`,\r\n        height: `0%`,\r\n      },\r\n      [`formOptionsContainer`]: `formOptionsContainer`,\r\n      innerFormSectionContainer: `innerFormSectionContainer`,\r\n      innerFormSectionInputs: `innerFormSectionInputs`,\r\n      innerFormAddInputButton: `innerFormAddInputButton`,\r\n      innerFormSubmitButton: `innerFormSubmitButton`,\r\n      formDataInputsHeader: `formDataInputsHeader`,\r\n      [`formOptionsInitialInputs`]: `formOptionsInitialInputs`,\r\n      extraHeaderOptionFreshFormBackToApiFrontPageButton: `extraHeaderOptionFreshFormBackToApiFrontPageButton`,\r\n      extraHeaderOptionFetchedProjectDataBackToFullPreviewPageButton: `extraHeaderOptionFetchedProjectDataBackToFullPreviewPageButton`,\r\n      anIdeaTitle: `anIdeaTitle`,\r\n      mediaSelectionNavDisplay: `mediaSelectionNavDisplay`,\r\n      mediaSelectionNavButton: `mediaSelectionNavButton`,\r\n      mediaSelectionNavButtonDisabled: `mediaSelectionNavButtonDisabled`,\r\n      outterMediaPreviewDisplay: `outterMediaPreviewDisplay`,\r\n      outterMediaPreviewDisplaySupport: {\r\n        width: `100%`,\r\n        height: `${(Dimensions[`get`](`window`)[`height`] / 100) * 95}px`,\r\n      },\r\n      innerMediaPreviewDisplay: `innerMediaPreviewDisplay`,\r\n      previewDisplayImage: `previewDisplayImage`,\r\n      passageContentText: `passage-content-text-input`,\r\n      finalInnerMediaPreviewDisplay: `finalInnerMediaPreviewDisplay`,\r\n      finalMediaPreviewsConsolidated: `finalMediaPreviewsConsolidated`,\r\n      finalIdeaTitle: `finalIdeaTitle`,\r\n      finalVideoPreview: `finalVideoPreview`,\r\n      finalVideoExtendedDataPreview: `finalVideoExtendedDataPreview`,\r\n      finalVideoName: `finalVideoName`,\r\n      finalVideoType: `finalVideoType`,\r\n      finalPhotoPreview: `finalPhotoPreview`,\r\n      finalPhotoExtendedData: `finalPhotoExtendedData`,\r\n      finalPhotoTitle: `finalPhotoTitle`,\r\n      finalPhotoReferences: `finalPhotoReferences`,\r\n      finalPassagePreview: `finalPassagePreview`,\r\n      finalPassageContentPreview: `finalPassageContentPreview`,\r\n      finalPassageExtendedDataPreview: `finalPassageExtendedDataPreview`,\r\n      finalPassageTitlePreview: `finalPassageTitlePreview`,\r\n      finalPassageWhatIsItPreview: `finalPassageWhatIsItPreview`,\r\n      finalPassageReferencesPreview: `finalPassageReferencesPreview`,\r\n      finalizeOptions: `finalizeOptions`,\r\n      returnToEditButton: `returnToEditButton`,\r\n      finalizeDataButton: `finalizeDataButton`,\r\n      retrievedProjectOptions: `retrievedProjectOptions`,\r\n      backToApiFrontPageButton: `backToApiFrontPageButton`,\r\n      projectsNavigationBar: `projectsNavigationBar`,\r\n      projectsNavigationPrevious: `projectsNavigationPrevious`,\r\n      projectsNavigationNext: `projectsNavigationNext`,\r\n      editFetchedProjectButton: `editFetchedProjectButton`,\r\n      destroyProjectButton: `destroyProjectButton`,\r\n      dataUploadConfirmationPage: `dataUploadConfirmationPage`,\r\n      dataUploadConfirmationTitle: `dataUploadConfirmationTitle`,\r\n      dataUploadConfirmationOptions: `dataUploadConfirmationOptions`,\r\n      dataUploadConfirmationOptionYes: `dataUploadConfirmationOptionYes`,\r\n      dataUploadConfirmationOptionNo: `dataUploadConfirmationOptionNo`,\r\n      apiFrontPage: `apiFrontPage`,\r\n      createNewIdeaButton: `createNewIdeaButton`,\r\n      browseIdeasForEditButton: `browseIdeasForEditButton`,\r\n      toMainProjectsPageButton: `toMainProjectsPageButton`,\r\n    };\r\n  });\r\n\r\n  // Declare variable holding authorization status\r\n  const [authorizationStatus, setAuthorizationStatus] = React.useState(() => ({\r\n    [`authorizedId`]: ``,\r\n    [`personalAccess`]: ``,\r\n  }));\r\n\r\n  // Declare variable holding initial form values\r\n  const [\r\n    initialFormValues,\r\n    setInitialFormValues,\r\n  ] = React.useState<genericObject>(() => {\r\n    return {\r\n      test: { title: `` },\r\n      videos: {},\r\n      muralPhotos: {},\r\n      galleryPhotos: {},\r\n      passages: {},\r\n      etcs: {},\r\n    };\r\n  });\r\n\r\n  // Declare variable holding media data ids\r\n  const [mediaDataIds, setMediaDataIds] = React.useState<{\r\n    current: {\r\n      video: string | number;\r\n      galleryPhoto: string | number;\r\n      passage: string | number;\r\n      fetchedProject?: {\r\n        id: string;\r\n        index: number;\r\n      };\r\n    };\r\n    dataBaseProjectIds?: Array<string>;\r\n  }>(() => {\r\n    return {\r\n      current: {\r\n        video: ``,\r\n        galleryPhoto: ``,\r\n        passage: ``,\r\n      },\r\n    };\r\n  });\r\n\r\n  // Declare variable holding current form media preview data\r\n  const [formPreviewData, setFormPreviewData] = React.useState<{\r\n    stored: any;\r\n    current: { type: string; data: any };\r\n  }>(() => {\r\n    return {\r\n      stored: {\r\n        passages: {},\r\n      },\r\n      current: {\r\n        type: `apiFrontPage`,\r\n        data: {},\r\n      },\r\n    };\r\n  });\r\n\r\n  const [formPreviewDisplay, setFormPreviewDisplay] = React.useState(() => {\r\n    return (\r\n      <div className={styles.apiFrontPage}>\r\n        <div\r\n          className={styles.createNewIdeaButton}\r\n          onClick={() => {\r\n            createNewIdea();\r\n          }}\r\n        >{`CREATE NEW IDEA`}</div>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  // Declare variable holding form yup schema\r\n  const [validSchema, setValidSchema] = React.useState(() => {\r\n    const initialSchema = yup.object().shape({\r\n      test: yup.object().shape({\r\n        title: yup.string().required(),\r\n      }),\r\n    });\r\n    return initialSchema;\r\n  });\r\n\r\n  // Declare variable holding data for form\r\n  const [dataForForm, setDataForForm] = React.useState<{\r\n    forId: string | number;\r\n    forInput: string | number;\r\n    inputValue: string | Object | undefined;\r\n  }>(() => {\r\n    return {\r\n      forId: ``,\r\n      forInput: ``,\r\n      inputValue: ``,\r\n    };\r\n  });\r\n\r\n  // Declare DOM refs for view manipulation and data extraction\r\n  let storedRefs: Record<string, React.MutableRefObject<any>> = {\r\n    innerFormDisplayRef: React.useRef<any>(),\r\n    videosInputViewRef: React.useRef<any>(),\r\n    videosMiniForm: React.useRef(),\r\n    galleryPhotosInputViewRef: React.useRef<any>(),\r\n    galleryPhotosMiniForm: React.useRef(),\r\n    passagesInputViewRef: React.useRef<any>(),\r\n    passagesMiniForm: React.useRef(),\r\n  };\r\n\r\n  let finalVideosMediaPreviewsRef = React.useRef<any>();\r\n  let finalGalleryPhotosMediaPreviewsRef = React.useRef<any>();\r\n  let finalJournalMediaPreviewsRef = React.useRef<any>();\r\n  let destroyProjectButtonRef = React.useRef<any>();\r\n\r\n  // Declare function handling fresh form page\r\n  const createNewIdea = () => {\r\n    setStyles((previousStyles) => {\r\n      return {\r\n        ...previousStyles,\r\n        innerFormDisplaySupport: {\r\n          ...previousStyles.innerFormDisplaySupport,\r\n          height: `${(screenHeight / 100) * 15 - 2}px`,\r\n          borderWidth: 2,\r\n        },\r\n        outterMediaPreviewDisplaySupport: {\r\n          ...previousStyles.outterMediaPreviewDisplaySupport,\r\n          height: `${(screenHeight / 100) * 80}px`,\r\n        },\r\n      };\r\n    });\r\n    setDataForForm((previousDataForForm) => {\r\n      return {\r\n        ...previousDataForForm,\r\n        forId: `freshForm`,\r\n        forInput: `AllFormInputs`,\r\n        inputValue: {\r\n          resetData: executeDataReset,\r\n          backToApi: backToApiFrontPage,\r\n        },\r\n      };\r\n    });\r\n    setFormPreviewData((previousFormPreviewData) => {\r\n      return {\r\n        ...previousFormPreviewData,\r\n        [`current`]: {\r\n          [`type`]: `freshForm`,\r\n          [`data`]: undefined,\r\n        },\r\n      };\r\n    });\r\n    setFormPreviewDisplay(() => {\r\n      return (\r\n        <div\r\n          className={styles.innerMediaPreviewDisplay}\r\n        >{`No Media Data To View`}</div>\r\n      );\r\n    });\r\n  };\r\n\r\n  // Handle fetching of previous project\r\n  const retrievePreviousFetchedProject = async (\r\n    stayAboveFirstIndex?: boolean,\r\n    customMediaDataIds?: any\r\n  ) => {\r\n    let forStorage = { passages: {}, gallery: {} };\r\n    let allVideosData = {};\r\n    let allGalleryData = {};\r\n    let allJournalData = {};\r\n    let consolidatedData = {};\r\n    let configuredId = { id: ``, index: -1 };\r\n    if (\r\n      mediaDataIds[`current`][`fetchedProject`] &&\r\n      mediaDataIds[`dataBaseProjectIds`]\r\n    ) {\r\n      const retrievedCurrentProjectIndex = customMediaDataIds\r\n        ? customMediaDataIds[`current`][`fetchedProject`][`index`]\r\n        : mediaDataIds[`current`][`fetchedProject`][`index`];\r\n      const prevProjectIndex =\r\n        retrievedCurrentProjectIndex <= 0\r\n          ? stayAboveFirstIndex\r\n            ? 0\r\n            : customMediaDataIds\r\n            ? customMediaDataIds[`dataBaseProjectIds`].length - 1\r\n            : mediaDataIds[`dataBaseProjectIds`].length - 1\r\n          : retrievedCurrentProjectIndex - 1;\r\n      const fetchedProjectData = await projectDataFetch(\r\n        customMediaDataIds\r\n          ? customMediaDataIds[`dataBaseProjectIds`][prevProjectIndex]\r\n          : mediaDataIds[`dataBaseProjectIds`][prevProjectIndex]\r\n      );\r\n      const retrievedFullData = fetchedProjectData[`projectData`][`fullData`];\r\n      retrievedFullData[`motionPictures`][`forEach`]((data) => {\r\n        allVideosData = {\r\n          ...allVideosData,\r\n          [`videoData-${data._id}`]: {\r\n            id: data._id,\r\n            name: data.videoName,\r\n            type: data.videoType,\r\n            url: data.videoUrl,\r\n          },\r\n        };\r\n      });\r\n      retrievedFullData[`majorCatalogPhotos`][`forEach`]((data) => {\r\n        forStorage = {\r\n          ...forStorage,\r\n          [`gallery`]: {\r\n            ...forStorage[`gallery`],\r\n            [`galleryPhotoData-${data._id}`]: {\r\n              url: `${dataBaseUrl}photos/${data.photoFilename}`,\r\n            },\r\n          },\r\n        };\r\n        allGalleryData = {\r\n          ...allGalleryData,\r\n          [`galleryPhotoData-${data._id}`]: {\r\n            id: data._id,\r\n            title: data.photoTitle,\r\n            references: data.photoReferences,\r\n            photo: `${dataBaseUrl}photos/${data.photoFilename}`,\r\n          },\r\n        };\r\n      });\r\n      retrievedFullData[`journal`][`forEach`]((data) => {\r\n        forStorage = {\r\n          ...forStorage,\r\n          [`passages`]: {\r\n            ...forStorage[`passages`],\r\n            [`passageData-${data._id}`]: {\r\n              content: data[`content`],\r\n            },\r\n          },\r\n        };\r\n        allJournalData = {\r\n          ...allJournalData,\r\n          [`passageData-${data._id}`]: {\r\n            id: data._id,\r\n            title: data.title,\r\n            whatIsIt: data.whatIsIt,\r\n            content: data.content,\r\n            references: data.references.web,\r\n          },\r\n        };\r\n      });\r\n      consolidatedData = {\r\n        ...consolidatedData,\r\n        [`test`]: { [`title`]: retrievedFullData[`ideaTitle`] },\r\n        [`videos`]: allVideosData,\r\n        [`galleryPhotos`]: allGalleryData,\r\n        [`passages`]: allJournalData,\r\n      };\r\n      configuredId = {\r\n        [`id`]: retrievedFullData[`_id`],\r\n        [`index`]: prevProjectIndex,\r\n      };\r\n      setMediaDataIds((previousMediaDataIds) => {\r\n        const updatedMediaDataIds = customMediaDataIds\r\n          ? {\r\n              ...customMediaDataIds,\r\n              [`current`]: {\r\n                ...customMediaDataIds[`current`],\r\n                [`fetchedProject`]: configuredId,\r\n              },\r\n            }\r\n          : {\r\n              ...previousMediaDataIds,\r\n              [`current`]: {\r\n                ...previousMediaDataIds[`current`],\r\n                [`fetchedProject`]: configuredId,\r\n              },\r\n            };\r\n        return updatedMediaDataIds;\r\n      });\r\n      setFormPreviewData((previousFormPreviewData) => {\r\n        return {\r\n          ...previousFormPreviewData,\r\n          [`stored`]: forStorage,\r\n          [`current`]: {\r\n            [`type`]: `viewExistingProject`,\r\n            [`data`]: consolidatedData,\r\n          },\r\n        };\r\n      });\r\n      console.log({\r\n        mediaDataIds: mediaDataIds,\r\n        prevProjectIndex,\r\n        fetchedProjectData,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle fetching of next project\r\n  const retrieveNextFetchedProject = async () => {\r\n    let forStorage = { passages: {}, gallery: {} };\r\n    let allVideosData = {};\r\n    let allGalleryData = {};\r\n    let allJournalData = {};\r\n    let consolidatedData = {};\r\n    let configuredId = { id: ``, index: -1 };\r\n    if (\r\n      mediaDataIds[`current`][`fetchedProject`] &&\r\n      mediaDataIds[`dataBaseProjectIds`]\r\n    ) {\r\n      const retrievedCurrentProjectIndex =\r\n        mediaDataIds[`current`][`fetchedProject`][`index`];\r\n      const nextProjectIndex =\r\n        retrievedCurrentProjectIndex >=\r\n        mediaDataIds[`dataBaseProjectIds`].length - 1\r\n          ? 0\r\n          : retrievedCurrentProjectIndex + 1;\r\n      const fetchedProjectData = await projectDataFetch(\r\n        mediaDataIds[`dataBaseProjectIds`][nextProjectIndex]\r\n      );\r\n      const retrievedFullData = fetchedProjectData[`projectData`][`fullData`];\r\n      retrievedFullData[`motionPictures`][`forEach`]((data) => {\r\n        allVideosData = {\r\n          ...allVideosData,\r\n          [`videoData-${data._id}`]: {\r\n            id: data._id,\r\n            name: data.videoName,\r\n            type: data.videoType,\r\n            url: data.videoUrl,\r\n          },\r\n        };\r\n      });\r\n      retrievedFullData[`majorCatalogPhotos`][`forEach`]((data) => {\r\n        forStorage = {\r\n          ...forStorage,\r\n          [`gallery`]: {\r\n            ...forStorage[`gallery`],\r\n            [`galleryPhotoData-${data._id}`]: {\r\n              url: `${dataBaseUrl}photos/${data.photoFilename}`,\r\n            },\r\n          },\r\n        };\r\n        allGalleryData = {\r\n          ...allGalleryData,\r\n          [`galleryPhotoData-${data._id}`]: {\r\n            id: data._id,\r\n            title: data.photoTitle,\r\n            references: data.photoReferences,\r\n            photo: `${dataBaseUrl}photos/${data.photoFilename}`,\r\n          },\r\n        };\r\n      });\r\n      retrievedFullData[`journal`][`forEach`]((data) => {\r\n        forStorage = {\r\n          ...forStorage,\r\n          [`passages`]: {\r\n            ...forStorage[`passages`],\r\n            [`passageData-${data._id}`]: {\r\n              content: data[`content`],\r\n            },\r\n          },\r\n        };\r\n        allJournalData = {\r\n          ...allJournalData,\r\n          [`passageData-${data._id}`]: {\r\n            id: data._id,\r\n            title: data.title,\r\n            whatIsIt: data.whatIsIt,\r\n            content: data.content,\r\n            references: data.references.web,\r\n          },\r\n        };\r\n      });\r\n      consolidatedData = {\r\n        ...consolidatedData,\r\n        [`test`]: { [`title`]: retrievedFullData[`ideaTitle`] },\r\n        [`videos`]: allVideosData,\r\n        [`galleryPhotos`]: allGalleryData,\r\n        [`passages`]: allJournalData,\r\n      };\r\n      configuredId = {\r\n        [`id`]: retrievedFullData[`_id`],\r\n        [`index`]: nextProjectIndex,\r\n      };\r\n      setMediaDataIds((previousMediaDataIds) => {\r\n        return {\r\n          ...previousMediaDataIds,\r\n          [`current`]: {\r\n            ...previousMediaDataIds[`current`],\r\n            [`fetchedProject`]: configuredId,\r\n          },\r\n        };\r\n      });\r\n      setFormPreviewData((previousFormPreviewData) => {\r\n        return {\r\n          ...previousFormPreviewData,\r\n          [`stored`]: forStorage,\r\n          [`current`]: {\r\n            [`type`]: `viewExistingProject`,\r\n            [`data`]: consolidatedData,\r\n          },\r\n        };\r\n      });\r\n      console.log({\r\n        mediaDataIds: mediaDataIds,\r\n        nextProjectIndex,\r\n        fetchedProjectData,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Declare function handling confirmation page\r\n  const confirmDataBaseUpload = (forFetchedProject: boolean) => {\r\n    setFormPreviewDisplay(() => {\r\n      return (\r\n        <div className={styles.dataUploadConfirmationPage}>\r\n          <div\r\n            className={styles.dataUploadConfirmationTitle}\r\n          >{`CONFIRM IDEA UPLOAD`}</div>\r\n          <div className={styles.dataUploadConfirmationOptions}>\r\n            <div\r\n              className={styles.dataUploadConfirmationOptionYes}\r\n              onClick={(event) => {\r\n                if (event.currentTarget.innerHTML === `YES`) {\r\n                  event.currentTarget.innerHTML = `UPLOADING...`;\r\n                  event.currentTarget.style.fontSize = `19px`;\r\n                  event.currentTarget.style.cursor = `default`;\r\n                  handleDataBaseUpload(forFetchedProject);\r\n                }\r\n              }}\r\n            >{`YES`}</div>\r\n            <div\r\n              className={styles.dataUploadConfirmationOptionNo}\r\n              onClick={() => {\r\n                setFormPreviewData((previousFormPreviewData) => {\r\n                  return {\r\n                    ...previousFormPreviewData,\r\n                    [`current`]: {\r\n                      ...previousFormPreviewData[`current`],\r\n                      [`type`]: `reCheck`,\r\n                    },\r\n                  };\r\n                });\r\n              }}\r\n            >{`RECHECK`}</div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  // Declare function handling removal of child nodes\r\n  const removeAllChildNodes = (parentNode: HTMLElement) => {\r\n    while (parentNode[`firstChild`]) {\r\n      parentNode[`removeChild`](parentNode[`firstChild`]);\r\n    }\r\n  };\r\n\r\n  // Declare function handling database update\r\n  const updateTheDataBase = async (formReset?: boolean, IdeaId?: string) => {\r\n    // Retrieve store data\r\n    let storeData = store.getState().projectSliceReducer.projectData;\r\n    // Handle clarification of idea database id\r\n    const ideaTitleForBody = JSON.stringify({\r\n      [`ideaTitle`]: formPreviewData[`current`][`data`][`test`][`title`],\r\n    });\r\n\r\n    const updatingDataBaseP1Id = IdeaId\r\n      ? IdeaId\r\n      : await fetch(`${dataBaseUrl}new-idea`, {\r\n          method: `POST`,\r\n          mode: `cors`,\r\n          cache: `no-cache`,\r\n          // credentials: `same-origin`,\r\n          headers: { [`Content-Type`]: `application/json` },\r\n          body: ideaTitleForBody,\r\n        })\r\n          .then((res) => {\r\n            const jsonParsed = res[`json`]();\r\n            return jsonParsed;\r\n          })\r\n          .then((data) => {\r\n            return data[`_id`];\r\n          });\r\n\r\n    // Handle adding new idea id to user's authorized data access\r\n    console[`log`]({\r\n      authorizationStatusCheckForAddingProject: authorizationStatus,\r\n    });\r\n    if (\r\n      !(\r\n        mediaDataIds[`dataBaseProjectIds`] &&\r\n        mediaDataIds[`dataBaseProjectIds`][`find`](\r\n          (dataBaseProjectId) =>\r\n            mediaDataIds[`current`][`fetchedProject`] &&\r\n            dataBaseProjectId ===\r\n              mediaDataIds[`current`][`fetchedProject`][`id`]\r\n        )\r\n      )\r\n    ) {\r\n      const addingToUsersAuthorizedDataAccesss = await fetch(\r\n        `${userBaseUrl}updateDataAccess/${\r\n          authorizationStatus[`authorizedId`]\r\n        }/webApp/AnIdea/operationMode/add`,\r\n        {\r\n          method: `PUT`,\r\n          mode: `cors`,\r\n          cache: `no-cache`,\r\n          // credentials: `same-origin`,\r\n          headers: { [`Content-Type`]: `application/json` },\r\n          body: JSON[`stringify`]({ [`projectId`]: updatingDataBaseP1Id }),\r\n        }\r\n      )[`then`]((res) => {\r\n        const json = res[`json`]();\r\n        return json;\r\n      });\r\n      console[`log`]({ addingToUsersAuthorizedDataAccesss });\r\n    }\r\n\r\n    // Handle updated title upload\r\n    if (\r\n      storeData[`title`] !== formPreviewData[`current`][`data`][`test`][`title`]\r\n    ) {\r\n      let updatingTitle = await fetch(\r\n        `${dataBaseUrl}${updatingDataBaseP1Id}/full-mutation/title`,\r\n        {\r\n          method: `PUT`,\r\n          mode: `cors`,\r\n          cache: `no-cache`,\r\n          // credentials: `same-origin`,\r\n          headers: { [`Content-Type`]: `application/json` },\r\n          body: ideaTitleForBody,\r\n        }\r\n      )\r\n        .then((res) => {\r\n          const jsonParsed = res.json();\r\n          return jsonParsed;\r\n        })\r\n        .catch((err) => {\r\n          console.log({ error: err });\r\n        });\r\n    }\r\n\r\n    // Handle data upload for videos\r\n    if (\r\n      formPreviewData[`current`][`data`][`videos`] &&\r\n      Object.keys(formPreviewData[`current`][`data`][`videos`])[`length`] > 0\r\n    ) {\r\n      let videosDataHold: Array<{\r\n        videoName: string;\r\n        videoUrl: string;\r\n        videoType: string;\r\n      }> = [];\r\n\r\n      for (let vD in formPreviewData[`current`][`data`][`videos`]) {\r\n        let extractedDataFromForm =\r\n          formPreviewData[`current`][`data`][`videos`][vD];\r\n\r\n        const configuredJSON = {\r\n          videoName: extractedDataFromForm[`name`],\r\n          videoUrl: extractedDataFromForm[`url`],\r\n          videoType: extractedDataFromForm[`type`],\r\n        };\r\n\r\n        videosDataHold.push(configuredJSON);\r\n      }\r\n      const stringifiedVideosData = JSON.stringify(videosDataHold);\r\n\r\n      const updatingDataBaseP2Videos = await fetch(\r\n        `${dataBaseUrl}${updatingDataBaseP1Id}/${\r\n          IdeaId ? `full-mutation` : `add`\r\n        }/videos`,\r\n        {\r\n          method: `PUT`,\r\n          mode: `cors`,\r\n          cache: `no-cache`,\r\n          headers: { [`Content-Type`]: `application/json` },\r\n          body: stringifiedVideosData,\r\n        }\r\n      );\r\n    }\r\n\r\n    if (\r\n      formPreviewData[`current`][`data`][`galleryPhotos`] &&\r\n      Object.keys(formPreviewData[`current`][`data`][`galleryPhotos`])[\r\n        `length`\r\n      ] > 0\r\n    ) {\r\n      // Declare variable holding database url for retrieving photos\r\n      let urlForPhotos = `${dataBaseUrl}photos/`;\r\n      // Handle upload of gallery data\r\n      const galleryFormData = new FormData();\r\n      const retrievedGalleryFormInputs =\r\n        storedRefs[`galleryPhotosInputViewRef`][`current`][`childNodes`];\r\n      const galleryFormPreviewData =\r\n        formPreviewData[`current`][`data`][`galleryPhotos`];\r\n      let retrievedStoreDataForGallery = storeData[`galleryPhotos`];\r\n      let galleryDataHold: Array<any> = [];\r\n      console.log({ galleryStoreData: retrievedStoreDataForGallery });\r\n\r\n      for (let u = 0; u < retrievedGalleryFormInputs[`length`]; u++) {\r\n        let photoDataId = retrievedGalleryFormInputs[u][`id`].replace(\r\n          `galleryPhotoData-`,\r\n          ``\r\n        );\r\n        let retrievedStoreDataForPhoto = retrievedStoreDataForGallery.find(\r\n          (photoData) => photoData.id === photoDataId\r\n        );\r\n        let retrievedPhotoFileData =\r\n          retrievedGalleryFormInputs[u][`childNodes`][2][`childNodes`][0][\r\n            `childNodes`\r\n          ][2][`files`][0];\r\n        let retrievedPhotoPreviewData =\r\n          galleryFormPreviewData[`${retrievedGalleryFormInputs[u][`id`]}`];\r\n        console.log({ retrievedPhotoPreviewData, retrievedStoreDataForPhoto });\r\n        if (IdeaId) {\r\n          if (\r\n            retrievedPhotoPreviewData[`photo`][`includes`](\r\n              `blob:http://localhost:3000`\r\n            ) ||\r\n            retrievedPhotoPreviewData[`title`] !==\r\n              retrievedStoreDataForPhoto?.title ||\r\n            retrievedPhotoPreviewData[`filename`] !==\r\n              retrievedStoreDataForPhoto?.filename\r\n          ) {\r\n            let conditionalFilenameConfig = retrievedPhotoPreviewData\r\n              ? retrievedPhotoPreviewData[`photo`].replace(urlForPhotos, ``)\r\n              : ``;\r\n            console.log({ conditionalFilenameConfig });\r\n            let photoDataConfigured = {\r\n              [`id`]: retrievedPhotoPreviewData[`id`],\r\n              [`title`]: retrievedPhotoPreviewData[`title`],\r\n              [`references`]: retrievedPhotoPreviewData[`references`],\r\n              [`filename`]: retrievedPhotoPreviewData[`photo`][`includes`](\r\n                `blob:http://localhost:3000`\r\n              )\r\n                ? undefined\r\n                : conditionalFilenameConfig,\r\n            };\r\n            galleryFormData[`append`](`photos`, retrievedPhotoFileData);\r\n            galleryDataHold[`push`](photoDataConfigured);\r\n          }\r\n        } else {\r\n          let photoDataConfigured = {\r\n            [`title`]: retrievedPhotoPreviewData[`title`],\r\n            [`references`]: retrievedPhotoPreviewData[`references`],\r\n          };\r\n          galleryFormData[`append`](`photos`, retrievedPhotoFileData);\r\n          galleryDataHold[`push`](photoDataConfigured);\r\n        }\r\n      }\r\n\r\n      // Handle Checking of deleted photos\r\n      let deletedPhotosIds: Array<string> = [];\r\n      for (let c = 0; c < retrievedStoreDataForGallery.length; c++) {\r\n        let verifiedPhotoForGallery = Object.values(\r\n          galleryFormPreviewData\r\n        ).some(\r\n          (data: any) => data.id === retrievedStoreDataForGallery[c][`id`]\r\n        );\r\n\r\n        if (!verifiedPhotoForGallery) {\r\n          deletedPhotosIds[`push`](retrievedStoreDataForGallery[c][`id`]);\r\n        }\r\n\r\n        console.log({ verifiedPhotoForGallery });\r\n      }\r\n\r\n      console.log({\r\n        galleryDataHold,\r\n        deletedPhotosIds,\r\n      });\r\n\r\n      const dataForMutation = {\r\n        mutatedData: galleryDataHold,\r\n        deletedPhotosIds: deletedPhotosIds,\r\n      };\r\n\r\n      const stringifiedGalleryData = IdeaId\r\n        ? JSON[`stringify`](dataForMutation)\r\n        : JSON[`stringify`](galleryDataHold);\r\n      galleryFormData[`append`](`photosData`, stringifiedGalleryData);\r\n\r\n      const updatingDataBaseP2Gallery = await fetch(\r\n        `${dataBaseUrl}${updatingDataBaseP1Id}/${\r\n          IdeaId ? `full-mutation` : `add`\r\n        }/gallery-photos`,\r\n        {\r\n          method: `PUT`,\r\n          mode: `cors`,\r\n          cache: `no-cache`,\r\n          // headers: { [`Content-Type`]: `multipart/form-data` },\r\n          body: galleryFormData,\r\n        }\r\n      ).then((res) => {\r\n        return res.json();\r\n      });\r\n      console.log({\r\n        galleryInputsCheckP2: galleryDataHold,\r\n        database: updatingDataBaseP2Gallery,\r\n      });\r\n    }\r\n\r\n    if (\r\n      formPreviewData[`current`][`data`][`passages`] &&\r\n      Object.keys(formPreviewData[`current`][`data`][`passages`])[`length`] > 0\r\n    ) {\r\n      // Handle data upload for videos\r\n      let journalDataHold: Array<{\r\n        title: string;\r\n        whatIsIt: string;\r\n        content: string;\r\n        humanRef: Array<string>;\r\n        webRef: Array<string>;\r\n      }> = [];\r\n\r\n      for (let pD in formPreviewData[`current`][`data`][`passages`]) {\r\n        let retrievedPassagePreviewData =\r\n          formPreviewData[`current`][`data`][`passages`][pD];\r\n\r\n        const configuredJSON = {\r\n          title: retrievedPassagePreviewData[`title`],\r\n          whatIsIt: retrievedPassagePreviewData[`whatIsIt`],\r\n          content: retrievedPassagePreviewData[`content`],\r\n          humanRef: [``],\r\n          webRef: retrievedPassagePreviewData[`references`],\r\n        };\r\n\r\n        journalDataHold.push(configuredJSON);\r\n        console.log({ pD, configuredJSON });\r\n      }\r\n      const stringifiedJournalData = JSON.stringify(journalDataHold);\r\n\r\n      const updatingDataBaseP2Journal = await fetch(\r\n        `${dataBaseUrl}${updatingDataBaseP1Id}/${\r\n          IdeaId ? `full-mutation` : `add`\r\n        }/journal-passages`,\r\n        {\r\n          method: `PUT`,\r\n          mode: `cors`,\r\n          cache: `no-cache`,\r\n          headers: { [`Content-Type`]: `application/json` },\r\n          body: stringifiedJournalData,\r\n        }\r\n      );\r\n    }\r\n    executeDataReset(false, false, true);\r\n  };\r\n\r\n  // Handle resetting of form and api display\r\n  const executeDataReset = async (\r\n    saveProjectPreviewData?: boolean,\r\n    saveMediaDataIds?: boolean,\r\n    saveMediaDatasElementNodes?: boolean\r\n  ) => {\r\n    const retrievedInputsElementForVideos = (storedRefs[`videosInputViewRef`][\r\n      `current`\r\n    ] as unknown) as HTMLDivElement;\r\n    const retrievedInputsElementForGalleryPhotos = (storedRefs[\r\n      `galleryPhotosInputViewRef`\r\n    ][`current`] as unknown) as HTMLDivElement;\r\n    const retrievedInputsElementForJournal = (storedRefs[\r\n      `passagesInputViewRef`\r\n    ][`current`] as unknown) as HTMLDivElement;\r\n\r\n    setDataForForm(() => {\r\n      return {\r\n        forId: `DataAnnihilation`,\r\n        forInput: `AllFormData`,\r\n        inputValue: {},\r\n      };\r\n    });\r\n\r\n    setMediaDataIds((previousMediaDataIds) => {\r\n      return saveMediaDataIds\r\n        ? { ...previousMediaDataIds }\r\n        : {\r\n            current: {\r\n              video: ``,\r\n              muralPhoto: ``,\r\n              galleryPhoto: ``,\r\n              passage: ``,\r\n            },\r\n          };\r\n    });\r\n\r\n    if (\r\n      !saveMediaDatasElementNodes ||\r\n      saveMediaDatasElementNodes === undefined\r\n    ) {\r\n      removeAllChildNodes(retrievedInputsElementForVideos);\r\n      removeAllChildNodes(retrievedInputsElementForGalleryPhotos);\r\n      removeAllChildNodes(retrievedInputsElementForJournal);\r\n    }\r\n\r\n    setInitialFormValues(() => {\r\n      return {\r\n        test: { title: `` },\r\n        videos: {},\r\n        muralPhotos: {},\r\n        galleryPhotos: {},\r\n        passages: {},\r\n        etcs: {},\r\n      };\r\n    });\r\n\r\n    setFormPreviewData((previousFormPreviewData) => {\r\n      return {\r\n        stored: saveProjectPreviewData\r\n          ? { ...previousFormPreviewData[`stored`] }\r\n          : {\r\n              gallery: {},\r\n              passages: {},\r\n            },\r\n        current: saveProjectPreviewData\r\n          ? { ...previousFormPreviewData[`current`] }\r\n          : {\r\n              type: `apiFrontPage`,\r\n              data: {},\r\n            },\r\n      };\r\n    });\r\n  };\r\n\r\n  const backToApiFrontPage = () => {\r\n    setStyles((styles) => {\r\n      return {\r\n        ...styles,\r\n        innerFormDisplaySupport: {\r\n          ...styles[`innerFormDisplaySupport`],\r\n          borderWidth: 0,\r\n          height: `0%`,\r\n        },\r\n        outterMediaPreviewDisplaySupport: {\r\n          ...styles[`outterMediaPreviewDisplaySupport`],\r\n          height: `${(Dimensions[`get`](`window`)[`height`] / 100) * 95}px`,\r\n        },\r\n      };\r\n    });\r\n\r\n    setFormPreviewDisplay(() => {\r\n      return (\r\n        <div className={styles.apiFrontPage}>\r\n          <div\r\n            className={styles.createNewIdeaButton}\r\n            onClick={() => {\r\n              removeAllChildNodes(storedRefs[`videosInputViewRef`][`current`]);\r\n              removeAllChildNodes(\r\n                storedRefs[`galleryPhotosInputViewRef`][`current`]\r\n              );\r\n              removeAllChildNodes(\r\n                storedRefs[`passagesInputViewRef`][`current`]\r\n              );\r\n              createNewIdea();\r\n            }}\r\n          >{`CREATE NEW IDEA`}</div>\r\n          {isAuthenticated ? (\r\n            <div\r\n              className={styles.browseIdeasForEditButton}\r\n              onClick={async () => {\r\n                console[`log`](\r\n                  `clicking for browsing of personal database projects`\r\n                );\r\n                removeAllChildNodes(\r\n                  storedRefs[`videosInputViewRef`][`current`]\r\n                );\r\n                removeAllChildNodes(\r\n                  storedRefs[`galleryPhotosInputViewRef`][`current`]\r\n                );\r\n                removeAllChildNodes(\r\n                  storedRefs[`passagesInputViewRef`][`current`]\r\n                );\r\n                let forStorage = { gallery: {}, passages: {} };\r\n                let allVideosData = {};\r\n                let allGalleryData = {};\r\n                let allJournalData = {};\r\n                let consolidatedData = {};\r\n                let dataBaseProjectIds: Array<string> = [];\r\n                let configuredId = { id: ``, index: -1 };\r\n\r\n                const handleRetrievalOfProjectData = async () => {\r\n                  const allCurrentDatabaseProjectsIds = await retrieveAllProjectsIds(\r\n                    {\r\n                      [`userId`]: authorizationStatus[`authorizedId`],\r\n                      [`accessPower`]: authorizationStatus[`personalAccess`],\r\n                    }\r\n                  );\r\n                  const retrievedProjectData = projectDataFetch(\r\n                    allCurrentDatabaseProjectsIds[0]\r\n                  );\r\n                  dataBaseProjectIds = allCurrentDatabaseProjectsIds;\r\n                  return retrievedProjectData;\r\n                };\r\n                const fetchedProjectData = await handleRetrievalOfProjectData();\r\n                const retrievedFullData =\r\n                  fetchedProjectData[`projectData`][`fullData`];\r\n                retrievedFullData[`motionPictures`][`forEach`]((data) => {\r\n                  allVideosData = {\r\n                    ...allVideosData,\r\n                    [`videoData-${data._id}`]: {\r\n                      id: data._id,\r\n                      name: data.videoName,\r\n                      type: data.videoType,\r\n                      url: data.videoUrl,\r\n                    },\r\n                  };\r\n                });\r\n                retrievedFullData[`majorCatalogPhotos`][`forEach`]((data) => {\r\n                  forStorage = {\r\n                    ...forStorage,\r\n                    [`gallery`]: {\r\n                      ...forStorage[`gallery`],\r\n                      [`galleryPhotoData-${data._id}`]: {\r\n                        url: `${dataBaseUrl}photos/${data.photoFilename}`,\r\n                      },\r\n                    },\r\n                  };\r\n                  allGalleryData = {\r\n                    ...allGalleryData,\r\n                    [`galleryPhotoData-${data._id}`]: {\r\n                      id: data._id,\r\n                      title: data.photoTitle,\r\n                      references: data.photoReferences,\r\n                      photo: `${dataBaseUrl}photos/${data.photoFilename}`,\r\n                    },\r\n                  };\r\n                });\r\n                retrievedFullData[`journal`][`forEach`]((data) => {\r\n                  forStorage = {\r\n                    ...forStorage,\r\n                    [`passages`]: {\r\n                      ...forStorage[`passages`],\r\n                      [`passageData-${data._id}`]: { content: data[`content`] },\r\n                    },\r\n                  };\r\n                  allJournalData = {\r\n                    ...allJournalData,\r\n                    [`passageData-${data._id}`]: {\r\n                      id: data._id,\r\n                      title: data.title,\r\n                      whatIsIt: data.whatIsIt,\r\n                      content: data.content,\r\n                      references: data.references.web,\r\n                    },\r\n                  };\r\n                });\r\n                consolidatedData = {\r\n                  ...consolidatedData,\r\n                  [`test`]: { [`title`]: retrievedFullData[`ideaTitle`] },\r\n                  [`videos`]: allVideosData,\r\n                  [`galleryPhotos`]: allGalleryData,\r\n                  [`passages`]: allJournalData,\r\n                };\r\n                configuredId = {\r\n                  [`id`]: retrievedFullData[`_id`],\r\n                  [`index`]: 0,\r\n                };\r\n                setMediaDataIds((previousMediaDataIds) => {\r\n                  return {\r\n                    ...previousMediaDataIds,\r\n                    [`dataBaseProjectIds`]: dataBaseProjectIds,\r\n                    [`current`]: {\r\n                      ...previousMediaDataIds[`current`],\r\n                      [`fetchedProject`]: configuredId,\r\n                    },\r\n                  };\r\n                });\r\n                setFormPreviewData((previousFormPreviewData) => {\r\n                  return {\r\n                    ...previousFormPreviewData,\r\n                    [`stored`]: forStorage,\r\n                    [`current`]: {\r\n                      [`type`]: `viewExistingProject`,\r\n                      [`data`]: consolidatedData,\r\n                    },\r\n                  };\r\n                });\r\n                console.log({\r\n                  fetchedProjectData,\r\n                  consolidatedData,\r\n                  configuredId,\r\n                });\r\n              }}\r\n            >{`BROWSE IDEAS TO EDIT`}</div>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  // Declare function handling finalized idea database upload\r\n  const handleDataBaseUpload = async (forFetchedProject: boolean) => {\r\n    console.log({ formPreviewData, storedRefs });\r\n    await updateTheDataBase(\r\n      forFetchedProject ? true : false,\r\n      forFetchedProject\r\n        ? mediaDataIds[`current`][`fetchedProject`]\r\n          ? mediaDataIds[`current`][`fetchedProject`][`id`]\r\n          : undefined\r\n        : undefined\r\n    ).then(() => {\r\n      backToApiFrontPage();\r\n    });\r\n  };\r\n\r\n  // Handle update of preview display\r\n  React.useEffect(() => {\r\n    console.log({ formPreviewData, mediaDataIds, authorizationStatus });\r\n    if (\r\n      isAuthenticated &&\r\n      formPreviewData[`current`][`type`] === `apiFrontPage`\r\n    ) {\r\n      setFormPreviewDisplay((prevFormPreviewDisplay) => {\r\n        return (\r\n          <div className={styles.apiFrontPage}>\r\n            <div\r\n              className={styles.createNewIdeaButton}\r\n              onClick={() => {\r\n                createNewIdea();\r\n              }}\r\n            >{`CREATE NEW IDEA`}</div>\r\n            <div\r\n              className={styles.browseIdeasForEditButton}\r\n              onClick={async (event) => {\r\n                event[`persist`]();\r\n                const eventTyped = (event as unknown) as React.ChangeEvent<HTMLDivElement>;\r\n                console[`log`]({ event });\r\n                console[`log`](`fetching projects for user`);\r\n                let forStorage = { gallery: {}, passages: {} };\r\n                let allVideosData = {};\r\n                let allGalleryData = {};\r\n                let allJournalData = {};\r\n                let consolidatedData = {};\r\n                let dataBaseProjectIds: Array<string> = [];\r\n                let configuredId = { id: ``, index: -1 };\r\n\r\n                console[`log`]({ authorizationStatus });\r\n                const allCurrentDatabaseProjectsIds = await retrieveAllProjectsIds(\r\n                  {\r\n                    [`userId`]: authorizationStatus[`authorizedId`],\r\n                    [`accessPower`]: authorizationStatus[`personalAccess`],\r\n                  }\r\n                );\r\n                console[`log`]({ allCurrentDatabaseProjectsIds });\r\n                if (\r\n                  allCurrentDatabaseProjectsIds &&\r\n                  allCurrentDatabaseProjectsIds[`length`] > 0\r\n                ) {\r\n                  const handleRetrievalOfProjectData = async () => {\r\n                    const retrievedProjectData = projectDataFetch(\r\n                      allCurrentDatabaseProjectsIds[0]\r\n                    );\r\n                    dataBaseProjectIds = allCurrentDatabaseProjectsIds;\r\n                    return retrievedProjectData;\r\n                  };\r\n                  const fetchedProjectData = await handleRetrievalOfProjectData();\r\n                  const retrievedFullData =\r\n                    fetchedProjectData[`projectData`][`fullData`];\r\n                  retrievedFullData[`motionPictures`][`forEach`]((data) => {\r\n                    allVideosData = {\r\n                      ...allVideosData,\r\n                      [`videoData-${data._id}`]: {\r\n                        id: data._id,\r\n                        name: data.videoName,\r\n                        type: data.videoType,\r\n                        url: data.videoUrl,\r\n                      },\r\n                    };\r\n                  });\r\n                  retrievedFullData[`majorCatalogPhotos`][`forEach`]((data) => {\r\n                    forStorage = {\r\n                      ...forStorage,\r\n                      [`gallery`]: {\r\n                        ...forStorage[`gallery`],\r\n                        [`galleryPhotoData-${data._id}`]: {\r\n                          url: `${dataBaseUrl}photos/${data.photoFilename}`,\r\n                        },\r\n                      },\r\n                    };\r\n                    allGalleryData = {\r\n                      ...allGalleryData,\r\n                      [`galleryPhotoData-${data._id}`]: {\r\n                        id: data._id,\r\n                        title: data.photoTitle,\r\n                        references: data.photoReferences,\r\n                        photo: `${dataBaseUrl}photos/${data.photoFilename}`,\r\n                      },\r\n                    };\r\n                  });\r\n                  retrievedFullData[`journal`][`forEach`]((data) => {\r\n                    forStorage = {\r\n                      ...forStorage,\r\n                      [`passages`]: {\r\n                        ...forStorage[`passages`],\r\n                        [`passageData-${data._id}`]: {\r\n                          content: data[`content`],\r\n                        },\r\n                      },\r\n                    };\r\n                    allJournalData = {\r\n                      ...allJournalData,\r\n                      [`passageData-${data._id}`]: {\r\n                        id: data._id,\r\n                        title: data.title,\r\n                        whatIsIt: data.whatIsIt,\r\n                        content: data.content,\r\n                        references: data.references.web,\r\n                      },\r\n                    };\r\n                  });\r\n                  consolidatedData = {\r\n                    ...consolidatedData,\r\n                    [`test`]: { [`title`]: retrievedFullData[`ideaTitle`] },\r\n                    [`videos`]: allVideosData,\r\n                    [`galleryPhotos`]: allGalleryData,\r\n                    [`passages`]: allJournalData,\r\n                  };\r\n                  configuredId = {\r\n                    [`id`]: retrievedFullData[`_id`],\r\n                    [`index`]: 0,\r\n                  };\r\n                  setMediaDataIds((previousMediaDataIds) => {\r\n                    return {\r\n                      ...previousMediaDataIds,\r\n                      [`dataBaseProjectIds`]: dataBaseProjectIds,\r\n                      [`current`]: {\r\n                        ...previousMediaDataIds[`current`],\r\n                        [`fetchedProject`]: configuredId,\r\n                      },\r\n                    };\r\n                  });\r\n                  setFormPreviewData((previousFormPreviewData) => {\r\n                    return {\r\n                      ...previousFormPreviewData,\r\n                      [`stored`]: forStorage,\r\n                      [`current`]: {\r\n                        [`type`]: `viewExistingProject`,\r\n                        [`data`]: consolidatedData,\r\n                      },\r\n                    };\r\n                  });\r\n                  console.log({\r\n                    fetchedProjectData,\r\n                    consolidatedData,\r\n                    configuredId,\r\n                  });\r\n                } else {\r\n                  eventTyped[`target`][`innerHTML`] = `NO PROJECTS FOR EDITING`;\r\n                }\r\n              }}\r\n            >{`BROWSE IDEAS TO EDIT`}</div>\r\n          </div>\r\n        );\r\n      });\r\n    } else if (formPreviewData[`current`][`type`] === `video`) {\r\n      setFormPreviewDisplay(() => {\r\n        return (\r\n          <div className={styles.innerMediaPreviewDisplay}>\r\n            <ReactPlayer\r\n              width={\"100%\"}\r\n              height={\"100%\"}\r\n              controls\r\n              url={\r\n                formPreviewData[`current`][`data`] &&\r\n                formPreviewData[`current`][`data`][`url`]\r\n                  ? formPreviewData[`current`][`data`][`url`]\r\n                  : undefined\r\n              }\r\n              config={{\r\n                youtube: {\r\n                  playerVars: { start: 0 },\r\n                },\r\n              }}\r\n              playing={false}\r\n              onStart={() => {\r\n                console.log(`React Player has loaded with message: Started`);\r\n              }}\r\n              onPlay={() => {}}\r\n              onPause={() => {}}\r\n              onEnded={() => {}}\r\n              onProgress={() => {}}\r\n            />\r\n          </div>\r\n        );\r\n      });\r\n    } else if (formPreviewData[`current`][`type`] === `galleryPhoto`) {\r\n      let verifiedPhotoSource = ``;\r\n      if (\r\n        formPreviewData[`current`][`data`] &&\r\n        formPreviewData[`current`][`data`][`photo`]\r\n      ) {\r\n        verifiedPhotoSource = formPreviewData[`current`][`data`][`photo`];\r\n      } else if (\r\n        formPreviewData[`stored`][`gallery`] &&\r\n        formPreviewData[`stored`][`gallery`][\r\n          mediaDataIds[`current`][`galleryPhoto`]\r\n        ]\r\n      ) {\r\n        verifiedPhotoSource =\r\n          formPreviewData[`stored`][`gallery`][\r\n            mediaDataIds[`current`][`galleryPhoto`]\r\n          ][`url`];\r\n      }\r\n\r\n      setFormPreviewDisplay(() => {\r\n        return (\r\n          <div className={styles.innerMediaPreviewDisplay}>\r\n            <img\r\n              className={styles.previewDisplayImage}\r\n              width={`100%`}\r\n              height={`100%`}\r\n              src={verifiedPhotoSource}\r\n              alt={`preview`}\r\n            />\r\n          </div>\r\n        );\r\n      });\r\n    } else if (formPreviewData[`current`][`type`] === `passage`) {\r\n      setFormPreviewDisplay((previousPreviewDisplay) => {\r\n        // Create react class element for passage preview\r\n        const textInputArea = React.createElement(\"textarea\", {\r\n          className: styles.passageContentText,\r\n          value:\r\n            mediaDataIds[`current`][`passage`] !== `` &&\r\n            formPreviewData[`stored`][`passages`][\r\n              mediaDataIds[`current`][`passage`]\r\n            ] &&\r\n            formPreviewData[`stored`][`passages`][\r\n              mediaDataIds[`current`][`passage`]\r\n            ][`content`]\r\n              ? formPreviewData[`stored`][`passages`][\r\n                  mediaDataIds[`current`][`passage`]\r\n                ][`content`]\r\n              : ``,\r\n          onChange: (event) => {\r\n            event[`persist`]();\r\n            const eventTyped = (event as unknown) as React.ChangeEvent<HTMLTextAreaElement>;\r\n            const retrievedText = eventTyped[`currentTarget`][`value`];\r\n            setDataForForm((previousDataForForm) => {\r\n              return {\r\n                ...previousDataForForm,\r\n                forId: `forStorage-${mediaDataIds[`current`][`passage`]}`,\r\n                forInput: `content`,\r\n                inputValue: retrievedText,\r\n              };\r\n            });\r\n          },\r\n        });\r\n        const PassagePreview = React.createElement(\r\n          \"div\",\r\n          { className: styles.innerMediaPreviewDisplay },\r\n          textInputArea\r\n        );\r\n\r\n        return PassagePreview;\r\n      });\r\n    }\r\n    if (\r\n      formPreviewData[`current`][`type`] === `allNewData` ||\r\n      formPreviewData[`current`][`type`] === `reCheck` ||\r\n      formPreviewData[`current`][`type`] === `viewExistingProject`\r\n    ) {\r\n      console.log({ allNewData: formPreviewData[`current`][`data`] });\r\n      let dataForVideos = [];\r\n      let dataForGallery = [];\r\n      let dataForJournal = [];\r\n\r\n      const optionsBar =\r\n        formPreviewData[`current`][`type`] === `viewExistingProject` ? (\r\n          <div className={styles.retrievedProjectOptions}>\r\n            <div\r\n              className={styles.backToApiFrontPageButton}\r\n              onClick={() => {\r\n                backToApiFrontPage();\r\n                executeDataReset();\r\n              }}\r\n            >{`BACK`}</div>\r\n            <div className={styles.projectsNavigationBar}>\r\n              <div\r\n                className={styles.projectsNavigationPrevious}\r\n                onClick={() => {\r\n                  retrievePreviousFetchedProject();\r\n                }}\r\n              >{`PREV`}</div>\r\n              <div\r\n                className={styles.projectsNavigationNext}\r\n                onClick={() => {\r\n                  retrieveNextFetchedProject();\r\n                }}\r\n              >{`NEXT`}</div>\r\n            </div>\r\n            <div\r\n              className={styles.editFetchedProjectButton}\r\n              onClick={() => {\r\n                console.log({ formPreviewData });\r\n                setDataForForm(() => {\r\n                  return {\r\n                    forId: `fetchedProjectData`,\r\n                    forInput: `AllFormInputs`,\r\n                    inputValue: {\r\n                      ...formPreviewData[`current`][`data`],\r\n                      resetData: executeDataReset,\r\n                    },\r\n                  };\r\n                });\r\n              }}\r\n            >{`EDIT PROJECT`}</div>\r\n            <div\r\n              ref={destroyProjectButtonRef}\r\n              className={styles.destroyProjectButton}\r\n              onClick={async (event) => {\r\n                const innerHtml = event.currentTarget.innerHTML;\r\n                console.log({ innerHtml });\r\n                if (innerHtml === `DESTROY PROJECT`) {\r\n                  event.currentTarget.innerHTML = `ARE YOU CERTAIN?`;\r\n                  event.currentTarget.style.color = `gainsboro`;\r\n                  event.currentTarget.style.borderColor = `gainsboro`;\r\n                  event.currentTarget.style.backgroundColor = `maroon`;\r\n                  setTimeout(() => {\r\n                    if (destroyProjectButtonRef[`current`]) {\r\n                      destroyProjectButtonRef.current.innerHTML = `DESTROY PROJECT`;\r\n                      destroyProjectButtonRef.current.style.color = ``;\r\n                      destroyProjectButtonRef.current.style.borderColor = ``;\r\n                      destroyProjectButtonRef.current.style.backgroundColor = ``;\r\n                    }\r\n                  }, 10000);\r\n                } else if (innerHtml === `ARE YOU CERTAIN?`) {\r\n                  console.log({\r\n                    mediaDataIds: mediaDataIds[`current`][`fetchedProject`]?.id,\r\n                  });\r\n                  await fetch(\r\n                    `${dataBaseUrl}${\r\n                      mediaDataIds[`current`][`fetchedProject`]?.id\r\n                    }/destroy`,\r\n                    {\r\n                      method: `DELETE`,\r\n                      mode: `cors`,\r\n                      cache: `no-cache`,\r\n                    }\r\n                  );\r\n                  await fetch(\r\n                    `${userBaseUrl}updateDataAccess/${\r\n                      authorizationStatus[`authorizedId`]\r\n                    }/webApp/AnIdea/operationMode/remove`,\r\n                    {\r\n                      method: `PUT`,\r\n                      mode: `cors`,\r\n                      cache: `no-cache`,\r\n                      // credentials: `same-origin`,\r\n                      headers: { [`Content-Type`]: `application/json` },\r\n                      body: JSON[`stringify`]({\r\n                        [`projectId`]: mediaDataIds[`current`][`fetchedProject`]\r\n                          ?.id,\r\n                      }),\r\n                    }\r\n                  );\r\n                  setMediaDataIds((previousMediaDataIds) => {\r\n                    let copyOfIds = { ...previousMediaDataIds };\r\n                    let copyOfDatabaseIds = copyOfIds[`dataBaseProjectIds`]\r\n                      ? [...copyOfIds[`dataBaseProjectIds`]]\r\n                      : [];\r\n                    let indexOfdeletedId = copyOfDatabaseIds.findIndex(\r\n                      (id) =>\r\n                        mediaDataIds[`current`][`fetchedProject`]?.id === id\r\n                    );\r\n\r\n                    if (indexOfdeletedId || indexOfdeletedId === 0) {\r\n                      if (indexOfdeletedId === 0) {\r\n                        console.log(`deleting at index 0`);\r\n                        copyOfDatabaseIds.shift();\r\n                      } else {\r\n                        copyOfDatabaseIds.splice(indexOfdeletedId, 1);\r\n                      }\r\n                    }\r\n\r\n                    copyOfIds = {\r\n                      ...copyOfIds,\r\n                      [`dataBaseProjectIds`]: copyOfDatabaseIds,\r\n                    };\r\n\r\n                    console.log({\r\n                      copyOfIds,\r\n                      copyOfDatabaseIds,\r\n                      indexOfdeletedId,\r\n                    });\r\n                    if (copyOfDatabaseIds[`length`] > 0) {\r\n                      retrievePreviousFetchedProject(true, copyOfIds);\r\n                    } else {\r\n                      setFormPreviewData((prevFormPreviewData) => {\r\n                        return {\r\n                          ...prevFormPreviewData,\r\n                          [`current`]: {\r\n                            ...prevFormPreviewData[`current`],\r\n                            [`type`]: `apiFrontPage`,\r\n                          },\r\n                        };\r\n                      });\r\n                    }\r\n                    return copyOfIds;\r\n                  });\r\n                  if (destroyProjectButtonRef[`current`]) {\r\n                    destroyProjectButtonRef.current.innerHTML = `DESTROY PROJECT`;\r\n                    destroyProjectButtonRef.current.style.color = ``;\r\n                    destroyProjectButtonRef.current.style.borderColor = ``;\r\n                    destroyProjectButtonRef.current.style.backgroundColor = ``;\r\n                  }\r\n                }\r\n              }}\r\n            >{`DESTROY PROJECT`}</div>\r\n          </div>\r\n        ) : (\r\n          <div className={styles.finalizeOptions}>\r\n            <div\r\n              className={styles.returnToEditButton}\r\n              onClick={() => {\r\n                setFormPreviewData((previousFormPreviewData) => {\r\n                  return {\r\n                    ...previousFormPreviewData,\r\n                    [`current`]: {\r\n                      ...previousFormPreviewData[`current`],\r\n                      [`type`]: `backToEditing`,\r\n                    },\r\n                  };\r\n                });\r\n                setFormPreviewDisplay(() => {\r\n                  return (\r\n                    <div className={styles.innerMediaPreviewDisplay}>\r\n                      {`BACK TO EDITING`}\r\n                    </div>\r\n                  );\r\n                });\r\n                setStyles((previousStyles) => {\r\n                  return {\r\n                    ...previousStyles,\r\n                    [`innerFormDisplaySupport`]: {\r\n                      ...previousStyles[`innerFormDisplaySupport`],\r\n                      height: `${(screenHeight / 100) * 15 - 2}px`,\r\n                      borderWidth: 2,\r\n                    },\r\n                    [`outterMediaPreviewDisplaySupport`]: {\r\n                      ...previousStyles[`outterMediaPreviewDisplaySupport`],\r\n                      height: `${(screenHeight / 100) * 80}px`,\r\n                    },\r\n                  };\r\n                });\r\n              }}\r\n            >{`BACK TO EDITING`}</div>\r\n            <div\r\n              className={styles.finalizeDataButton}\r\n              onClick={(event) => {\r\n                confirmDataBaseUpload(\r\n                  mediaDataIds[`current`][`fetchedProject`] &&\r\n                    mediaDataIds[`current`][`fetchedProject`][`id`]\r\n                    ? true\r\n                    : false\r\n                );\r\n              }}\r\n            >\r\n              {mediaDataIds[`dataBaseProjectIds`] &&\r\n              mediaDataIds[`dataBaseProjectIds`][`find`](\r\n                (dataBaseProjectId) =>\r\n                  mediaDataIds[`current`][`fetchedProject`] &&\r\n                  dataBaseProjectId ===\r\n                    mediaDataIds[`current`][`fetchedProject`][`id`]\r\n              )\r\n                ? `UPDATE IDEA TO DATABASE`\r\n                : `UPLOAD NEW IDEA TO DATABASE`}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      for (let v in formPreviewData[`current`][`data`][`videos`]) {\r\n        let configgedVideoView = (\r\n          <div\r\n            key={v}\r\n            id={v}\r\n            className={styles.finalVideoPreview}\r\n            onMouseOver={(event) => {\r\n              const eventTyped = (event as unknown) as React.ChangeEvent<HTMLDivElement>;\r\n              const childNodesRetrieved = (finalVideosMediaPreviewsRef[\r\n                `current`\r\n              ][`childNodes`] as unknown) as Array<HTMLDivElement>;\r\n              let foundElement = ((<div></div>) as unknown) as HTMLDivElement;\r\n              for (let y = 0; y < childNodesRetrieved[`length`]; y++) {\r\n                if (childNodesRetrieved[y][`id`][`includes`](v)) {\r\n                  foundElement = childNodesRetrieved[y];\r\n                }\r\n              }\r\n              const retrievedExtendedDataElement = (foundElement[\r\n                `childNodes`\r\n              ][1] as unknown) as HTMLDivElement;\r\n              foundElement[`style`][`width`] = `58%`;\r\n              retrievedExtendedDataElement[`style`][`display`] = `flex`;\r\n            }}\r\n            onMouseOut={(event) => {\r\n              const eventTyped = (event as unknown) as React.ChangeEvent<HTMLDivElement>;\r\n              const childNodesRetrieved = (finalVideosMediaPreviewsRef[\r\n                `current`\r\n              ][`childNodes`] as unknown) as Array<HTMLDivElement>;\r\n              let foundElement = ((<div></div>) as unknown) as HTMLDivElement;\r\n              for (let y = 0; y < childNodesRetrieved[`length`]; y++) {\r\n                if (childNodesRetrieved[y][`id`][`includes`](v)) {\r\n                  foundElement = childNodesRetrieved[y];\r\n                }\r\n              }\r\n              const retrievedExtendedDataElement = (foundElement[\r\n                `childNodes`\r\n              ][1] as unknown) as HTMLDivElement;\r\n              foundElement[`style`][`width`] = `29%`;\r\n              retrievedExtendedDataElement[`style`][`display`] = `none`;\r\n            }}\r\n          >\r\n            <ReactPlayer\r\n              width={\"100%\"}\r\n              height={\"100%\"}\r\n              controls\r\n              url={formPreviewData[`current`][`data`][`videos`][v][`url`]}\r\n              config={{\r\n                youtube: {\r\n                  playerVars: { start: 0 },\r\n                },\r\n              }}\r\n              playing={false}\r\n              onStart={() => {\r\n                console.log(`React Player has loaded with message: Started`);\r\n              }}\r\n              onPlay={() => {}}\r\n              onPause={() => {}}\r\n              onEnded={() => {}}\r\n              onProgress={() => {}}\r\n            />\r\n            <div className={styles.finalVideoExtendedDataPreview}>\r\n              <div className={styles.finalVideoName}>{`Name:   ${\r\n                formPreviewData[`current`][`data`][`videos`][v][`name`]\r\n              }`}</div>\r\n              <div className={styles.finalVideoType}>{`Type:   ${\r\n                formPreviewData[`current`][`data`][`videos`][v][`type`]\r\n              }`}</div>\r\n            </div>\r\n          </div>\r\n        );\r\n        dataForVideos.push(configgedVideoView);\r\n      }\r\n      for (let gP in formPreviewData[`current`][`data`][`galleryPhotos`]) {\r\n        let configgedPhotoView = (\r\n          <div\r\n            key={gP}\r\n            id={gP}\r\n            className={styles.finalPhotoPreview}\r\n            onMouseOver={(event) => {\r\n              const eventTyped = (event as unknown) as React.ChangeEvent<HTMLDivElement>;\r\n              const childNodesRetrieved = (finalGalleryPhotosMediaPreviewsRef[\r\n                `current`\r\n              ][`childNodes`] as unknown) as Array<HTMLDivElement>;\r\n              let foundElement = ((<div></div>) as unknown) as HTMLDivElement;\r\n              for (let y = 0; y < childNodesRetrieved[`length`]; y++) {\r\n                if (childNodesRetrieved[y][`id`][`includes`](gP)) {\r\n                  foundElement = childNodesRetrieved[y];\r\n                }\r\n              }\r\n              const retrievedImageDataElement = (foundElement[\r\n                `childNodes`\r\n              ][0] as unknown) as HTMLImageElement;\r\n              const retrievedExtendedDataElement = (foundElement[\r\n                `childNodes`\r\n              ][1] as unknown) as HTMLDivElement;\r\n              foundElement[`style`][`width`] = `58%`;\r\n              retrievedExtendedDataElement[`style`][`display`] = `flex`;\r\n              retrievedImageDataElement[`style`][`width`] = `50%`;\r\n            }}\r\n            onMouseOut={(event) => {\r\n              const eventTyped = (event as unknown) as React.ChangeEvent<HTMLDivElement>;\r\n              const childNodesRetrieved = (finalGalleryPhotosMediaPreviewsRef[\r\n                `current`\r\n              ][`childNodes`] as unknown) as Array<HTMLDivElement>;\r\n              let foundElement = ((<div></div>) as unknown) as HTMLDivElement;\r\n              for (let y = 0; y < childNodesRetrieved[`length`]; y++) {\r\n                if (childNodesRetrieved[y][`id`][`includes`](gP)) {\r\n                  foundElement = childNodesRetrieved[y];\r\n                }\r\n              }\r\n              const retrievedImageDataElement = (foundElement[\r\n                `childNodes`\r\n              ][0] as unknown) as HTMLImageElement;\r\n              const retrievedExtendedDataElement = (foundElement[\r\n                `childNodes`\r\n              ][1] as unknown) as HTMLDivElement;\r\n              foundElement[`style`][`width`] = `29%`;\r\n              retrievedExtendedDataElement[`style`][`display`] = `none`;\r\n              retrievedImageDataElement[`style`][`width`] = `100%`;\r\n            }}\r\n          >\r\n            <img\r\n              className={styles.previewDisplayImage}\r\n              src={\r\n                formPreviewData[`current`][`data`][`galleryPhotos`][gP][`photo`]\r\n              }\r\n              alt={`preview`}\r\n            />\r\n            <div className={styles.finalPhotoExtendedData}>\r\n              <div className={styles.finalPhotoTitle}>{`Title:   ${\r\n                formPreviewData[`current`][`data`][`galleryPhotos`][gP][`title`]\r\n              }`}</div>\r\n              <div className={styles.finalPhotoReferences}>\r\n                {`References:   `}\r\n                {formPreviewData[`current`][`data`][`galleryPhotos`][gP][\r\n                  `references`\r\n                ][`map`]((reference: string) => reference)}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n        dataForGallery.push(configgedPhotoView);\r\n      }\r\n      for (let p in formPreviewData[`current`][`data`][`passages`]) {\r\n        let configgedPassageView = (\r\n          <div\r\n            key={p}\r\n            id={p}\r\n            className={styles.finalPassagePreview}\r\n            onMouseOver={(event) => {\r\n              const eventTyped = (event as unknown) as React.ChangeEvent<HTMLDivElement>;\r\n              const childNodesRetrieved = (finalJournalMediaPreviewsRef[\r\n                `current`\r\n              ][`childNodes`] as unknown) as Array<HTMLDivElement>;\r\n              let foundElement = ((<div></div>) as unknown) as HTMLDivElement;\r\n              for (let y = 0; y < childNodesRetrieved[`length`]; y++) {\r\n                if (childNodesRetrieved[y][`id`][`includes`](p)) {\r\n                  foundElement = childNodesRetrieved[y];\r\n                }\r\n              }\r\n              const retrievedContentDataElement = (foundElement[\r\n                `childNodes`\r\n              ][0] as unknown) as HTMLDivElement;\r\n              const retrievedExtendedDataElement = (foundElement[\r\n                `childNodes`\r\n              ][1] as unknown) as HTMLDivElement;\r\n              foundElement[`style`][`width`] = `58%`;\r\n              retrievedContentDataElement[`style`][`width`] = `50%`;\r\n              retrievedExtendedDataElement[`style`][`display`] = `flex`;\r\n            }}\r\n            onMouseOut={(event) => {\r\n              const eventTyped = (event as unknown) as React.ChangeEvent<HTMLDivElement>;\r\n              const childNodesRetrieved = (finalJournalMediaPreviewsRef[\r\n                `current`\r\n              ][`childNodes`] as unknown) as Array<HTMLDivElement>;\r\n              let foundElement = ((<div></div>) as unknown) as HTMLDivElement;\r\n              for (let y = 0; y < childNodesRetrieved[`length`]; y++) {\r\n                if (childNodesRetrieved[y][`id`][`includes`](p)) {\r\n                  foundElement = childNodesRetrieved[y];\r\n                }\r\n              }\r\n              const retrievedContentDataElement = (foundElement[\r\n                `childNodes`\r\n              ][0] as unknown) as HTMLDivElement;\r\n              const retrievedExtendedDataElement = (foundElement[\r\n                `childNodes`\r\n              ][1] as unknown) as HTMLDivElement;\r\n              foundElement[`style`][`width`] = `29%`;\r\n              retrievedContentDataElement[`style`][`width`] = `100%`;\r\n              retrievedExtendedDataElement[`style`][`display`] = `none`;\r\n            }}\r\n          >\r\n            <div className={styles.finalPassageContentPreview}>\r\n              {formPreviewData[`current`][`data`][`passages`][p][`content`]}\r\n            </div>\r\n            <div className={styles.finalPassageExtendedDataPreview}>\r\n              <div className={styles.finalPassageTitlePreview}>\r\n                {`Title:   `}\r\n                {formPreviewData[`current`][`data`][`passages`][p][`title`]}\r\n              </div>\r\n              <div className={styles.finalPassageWhatIsItPreview}>\r\n                {`WhatIsIt:   `}\r\n                {formPreviewData[`current`][`data`][`passages`][p][`whatIsIt`]}\r\n              </div>\r\n              <div className={styles.finalPassageReferencesPreview}>\r\n                {`References:   `}\r\n                {formPreviewData[`current`][`data`][`passages`][p][\r\n                  `references`\r\n                ][`map`]((reference: string) => reference)}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n        dataForJournal.push(configgedPassageView);\r\n      }\r\n      const mediaPreviewsConsolidated = (\r\n        <div\r\n          id={`consolidatedMediaView`}\r\n          className={styles.finalInnerMediaPreviewDisplay}\r\n        >\r\n          <div className={styles.finalIdeaTitle}>\r\n            {formPreviewData[`current`][`data`][`test`][`title`]}\r\n          </div>\r\n          <div\r\n            ref={finalVideosMediaPreviewsRef}\r\n            className={styles.finalMediaPreviewsConsolidated}\r\n          >\r\n            {dataForVideos.map((videoView) => videoView)}\r\n          </div>\r\n          <div\r\n            ref={finalGalleryPhotosMediaPreviewsRef}\r\n            className={styles.finalMediaPreviewsConsolidated}\r\n          >\r\n            {dataForGallery.map((photoView) => photoView)}\r\n          </div>\r\n          <div\r\n            ref={finalJournalMediaPreviewsRef}\r\n            className={styles.finalMediaPreviewsConsolidated}\r\n          >\r\n            {dataForJournal.map((passageView) => passageView)}\r\n          </div>\r\n          {optionsBar}\r\n        </div>\r\n      );\r\n      setStyles((styles) => {\r\n        return {\r\n          ...styles,\r\n          innerFormDisplaySupport: {\r\n            ...styles[`innerFormDisplaySupport`],\r\n            height: `0px`,\r\n            borderWidth: 0,\r\n          },\r\n          outterMediaPreviewDisplaySupport: {\r\n            ...styles[`outterMediaPreviewDisplaySupport`],\r\n            height: `${(Dimensions[`get`](`window`)[`height`] / 100) * 95}px`,\r\n          },\r\n        };\r\n      });\r\n      setFormPreviewDisplay(() => {\r\n        return mediaPreviewsConsolidated;\r\n      });\r\n    } else if (\r\n      formPreviewData[`current`][`type`] === `formFilledForFetchedProject`\r\n    ) {\r\n      setStyles((previousStyles) => {\r\n        return {\r\n          ...previousStyles,\r\n          innerFormDisplaySupport: {\r\n            ...previousStyles[`innerFormDisplaySupport`],\r\n            height: `${(screenHeight / 100) * 15 - 2}px`,\r\n            borderWidth: 2,\r\n          },\r\n          outterMediaPreviewDisplaySupport: {\r\n            ...previousStyles[`outterMediaPreviewDisplaySupport`],\r\n            height: `${(screenHeight / 100) * 80}px`,\r\n          },\r\n        };\r\n      });\r\n      setFormPreviewDisplay(() => {\r\n        return (\r\n          <div\r\n            className={styles.innerMediaPreviewDisplay}\r\n          >{`RETRIEVED PROJECT READY FOR EDIT`}</div>\r\n        );\r\n      });\r\n    }\r\n  }, [formPreviewData, authorizationStatus]);\r\n\r\n  // Handle processes for media ids updates\r\n  React.useEffect(() => {\r\n    if (formPreviewData[`current`][`type`] === `passage`) {\r\n      console.log(`updating passage preview due to media id change`, {\r\n        currentPassageId: mediaDataIds[`current`][`passage`],\r\n        passages: formPreviewData[`stored`][`passages`],\r\n        passage:\r\n          formPreviewData[`stored`][`passages`][\r\n            mediaDataIds[`current`][`passage`]\r\n          ] &&\r\n          formPreviewData[`stored`][`passages`][\r\n            mediaDataIds[`current`][`passage`]\r\n          ][`content`]\r\n            ? formPreviewData[`stored`][`passages`][\r\n                mediaDataIds[`current`][`passage`]\r\n              ][`content`]\r\n            : ``,\r\n      });\r\n      setFormPreviewDisplay((previousPreviewDisplay) => {\r\n        // Create react class element for passage preview\r\n        console.log({ formPreviewDataForPassages: formPreviewData });\r\n        const textInputArea = React.createElement(\"textarea\", {\r\n          className: styles.passageContentText,\r\n          value:\r\n            formPreviewData[`stored`][`passages`][\r\n              mediaDataIds[`current`][`passage`]\r\n            ] &&\r\n            formPreviewData[`stored`][`passages`][\r\n              mediaDataIds[`current`][`passage`]\r\n            ][`content`]\r\n              ? formPreviewData[`stored`][`passages`][\r\n                  mediaDataIds[`current`][`passage`]\r\n                ][`content`]\r\n              : ``,\r\n          onChange: (event) => {\r\n            event[`persist`]();\r\n            const eventTyped = (event as unknown) as React.ChangeEvent<HTMLTextAreaElement>;\r\n            const retrievedText = eventTyped[`currentTarget`][`value`];\r\n            setDataForForm((previousDataForForm) => {\r\n              return {\r\n                ...previousDataForForm,\r\n                forId: `forStorage-${mediaDataIds[`current`][`passage`]}`,\r\n                forInput: `content`,\r\n                inputValue: retrievedText,\r\n              };\r\n            });\r\n          },\r\n        });\r\n        const PassagePreview = React.createElement(\r\n          \"div\",\r\n          { className: styles.innerMediaPreviewDisplay },\r\n          textInputArea\r\n        );\r\n\r\n        return PassagePreview;\r\n      });\r\n    }\r\n  }, [mediaDataIds]);\r\n\r\n  // Handle function component return view\r\n  return (\r\n    <div\r\n      className={styles.mainDisplaySupportClass}\r\n      style={styles.mainDisplaySupportStyle}\r\n    >\r\n      <div\r\n        className={styles[`headerBarForAPI`]}\r\n        style={styles[`headerBarForAPISupport`]}\r\n      >\r\n        <HeaderBar\r\n          authorizationStatusOpts={{\r\n            authorizationStatus,\r\n            setAuthorizationStatus,\r\n          }}\r\n        />\r\n      </div>\r\n      <div\r\n        className={styles.outterMediaPreviewDisplay}\r\n        style={styles.outterMediaPreviewDisplaySupport}\r\n      >\r\n        {formPreviewDisplay}\r\n      </div>\r\n      <FormConfiguration\r\n        styles={styles}\r\n        customInitialFormValues={{\r\n          initialFormValues: initialFormValues,\r\n          setInitialFormValues: setInitialFormValues,\r\n        }}\r\n        ids={{ mediaDataIds, setMediaDataIds }}\r\n        formFacade={{\r\n          initialInputs: [{ name: `title`, inputType: `text` }],\r\n          mediaInputsNav: [\r\n            { mediaType: `video`, buttonText: `Vids` },\r\n            { mediaType: `galleryPhoto`, buttonText: `Gallery` },\r\n            { mediaType: `passage`, buttonText: `Passages` },\r\n          ],\r\n          mediaMiniFormInputs: [\r\n            {\r\n              mediaType: `video`,\r\n              addButtonText: `Add Video`,\r\n              inputsOpts: [\r\n                { key: `name`, typeOfInput: `textInput` },\r\n                { key: `url`, typeOfInput: `textInput` },\r\n                {\r\n                  key: `type`,\r\n                  typeOfInput: `listInput`,\r\n                  childrenElements: [`youtube`, `not listed`],\r\n                },\r\n              ],\r\n              inputsDeletionCallback: () => {\r\n                return { name: ``, url: ``, type: `` };\r\n              },\r\n            },\r\n            {\r\n              mediaType: `galleryPhoto`,\r\n              addButtonText: `Add Gallery Photo`,\r\n              inputsOpts: [\r\n                { key: `photo`, typeOfInput: `fileInput` },\r\n                { key: `title`, typeOfInput: `textInput` },\r\n                {\r\n                  key: `reference`,\r\n                  typeOfInput: `textInputWithSubIndex`,\r\n                },\r\n              ],\r\n              inputsDeletionCallback: () => {\r\n                return { title: ``, photo: `reset`, references: [``] };\r\n              },\r\n            },\r\n            {\r\n              mediaType: `passage`,\r\n              addButtonText: `Add Passage`,\r\n              inputsOpts: [\r\n                { key: `title`, typeOfInput: `textInput` },\r\n                { key: `whatIsIt`, typeOfInput: `textInput` },\r\n                { key: `content`, typeOfInput: `` },\r\n                {\r\n                  key: `reference`,\r\n                  typeOfInput: `textInputWithSubIndex`,\r\n                },\r\n              ],\r\n              inputsDeletionCallback: () => {\r\n                return {\r\n                  title: ``,\r\n                  whatIsIt: ``,\r\n                  content: ``,\r\n                  references: [``],\r\n                };\r\n              },\r\n            },\r\n          ],\r\n        }}\r\n        formPreviewDataOpts={{ formPreviewData, setFormPreviewData }}\r\n        customFormSchema={{\r\n          validSchema: validSchema,\r\n          setValidSchema: setValidSchema,\r\n        }}\r\n        storedRefs={storedRefs}\r\n        dataForForm={dataForForm}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles2 = StyleSheet.create({\r\n  mainDisplay: {\r\n    flexDirection: `row`,\r\n    justifyContent: \"center\",\r\n    alignItems: \"stretch\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    overflow: \"hidden\",\r\n  },\r\n});\r\n\r\nexport default API;\r\n\r\n/**  Another window resize suggestion\r\n * <canvas\r\n * width={window.innerWidth}\r\n * height={window.innerHeight}\r\n * ></canvas\r\n * */\r\n","C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\index.tsx",["68"],"import React from \"react\";\nimport { AppRegistry } from \"react-native\";\nimport \"typeface-roboto\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\n\nAppRegistry.registerComponent(\"App\", () => App);\n\nAppRegistry.runApplication(\"App\", {\n  initialProps: {},\n  rootTag: document.getElementById(\"root\"),\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n",["69","70"],"C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\history\\history.tsx",[],["71","72"],"C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\features\\Interfaces\\Desktop\\Project\\Project.tsx",["73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90"],"C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\serviceWorker.ts",[],"C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\routes\\routerBlock.js",["91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136"],"import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport configureStore from \"../app/configureStore\";\r\nimport history from \"../history/history\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\n\r\nimport Project from \"../features/Interfaces/Desktop/Project/Project\";\r\nimport API from \"../features/Interfaces/Desktop/API/API\";\r\n\r\nrequire(\"dotenv\").config();\r\n\r\nexport const store = configureStore();\r\nexport const isMobile = checkIfMobileBrowser();\r\nexport const localUrl = isMobile\r\n  ? process.env.REACT_APP_MOBILE_LOCAL_URL\r\n  : process.env.REACT_APP_LOCAL_URL;\r\nexport const dataBaseUrl = isMobile\r\n  ? process.env.REACT_APP_MOBILE_DATABASE_URL\r\n  : process.env.REACT_APP_DATABASE_URL;\r\nexport const userBaseUrl = isMobile\r\n  ? process.env.REACT_APP_MOBILE_USERBASE_URL\r\n  : process.env.REACT_APP_USERBASE_URL;\r\nexport const domain = process.env.REACT_APP_AUTH0_DOMAIN;\r\nexport const clientId = process.env.REACT_APP_AUTH0_CLIENT_ID;\r\n\r\nfunction checkIfMobileBrowser() {\r\n  let check = false;\r\n  (function (a) {\r\n    if (\r\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\r\n        a\r\n      ) ||\r\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\r\n        a.substr(0, 4)\r\n      )\r\n    )\r\n      check = true;\r\n  })(navigator.userAgent || navigator.vendor || window.opera);\r\n  return check;\r\n}\r\n\r\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        return localStorage.getItem(\"token\") ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/\" />\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst RoutesComposed = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const expirationDate = Number(localStorage.getItem(\"expirationDate\"));\r\n  const currentTime = new Date().getTime();\r\n  const authorized = token !== null && expirationDate >= currentTime;\r\n\r\n  // Listening for Authorization of Session\r\n  React.useEffect(() => {\r\n    console[`log`]({ domain, clientId, localUrl, dataBaseUrl, userBaseUrl });\r\n    if (authorized) {\r\n      console.log(\"Authorized\");\r\n    } else {\r\n      console.log(\"UnAuthorized\");\r\n    }\r\n  }, [authorized]);\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <ConnectedRouter history={history}>\r\n        <Router history={history}>\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path=\"/project\"\r\n              component={isMobile ? Project : Project}\r\n            />\r\n            <Route exact path=\"/api\" component={isMobile ? API : API} />\r\n            <ProtectedRoute\r\n              path=\"/protected\"\r\n              component={isMobile ? Project : Project}\r\n            />\r\n          </Switch>\r\n        </Router>\r\n      </ConnectedRouter>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default class RouterBlock extends React.Component {\r\n  render() {\r\n    return <RoutesComposed />;\r\n  }\r\n}\r\n",["137","138"],"C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\app\\configureStore.tsx",[],"C:\\Users\\durha\\dev-projects\\land\\portfolios\\Luuu\\an-idea-v2\\src\\features\\Interfaces\\Desktop\\HeaderBar\\HeaderBarMax.tsx",["139","140","141","142","143","144","145"],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":2,"column":10,"nodeType":"152","messageId":"153","endLine":2,"endColumn":14},{"ruleId":"150","severity":1,"message":"154","line":20,"column":3,"nodeType":"152","messageId":"153","endLine":20,"endColumn":11},{"ruleId":"150","severity":1,"message":"155","line":104,"column":11,"nodeType":"152","messageId":"153","endLine":104,"endColumn":26},{"ruleId":"150","severity":1,"message":"156","line":1276,"column":21,"nodeType":"152","messageId":"153","endLine":1276,"endColumn":23},{"ruleId":"157","severity":1,"message":"158","line":1338,"column":6,"nodeType":"159","endLine":1338,"endColumn":19,"suggestions":"160"},{"ruleId":"157","severity":1,"message":"161","line":1540,"column":6,"nodeType":"159","endLine":1540,"endColumn":33,"suggestions":"162"},{"ruleId":"150","severity":1,"message":"163","line":2134,"column":11,"nodeType":"152","messageId":"153","endLine":2134,"endColumn":24},{"ruleId":"150","severity":1,"message":"164","line":2179,"column":13,"nodeType":"152","messageId":"153","endLine":2179,"endColumn":37},{"ruleId":"150","severity":1,"message":"165","line":2344,"column":13,"nodeType":"152","messageId":"153","endLine":2344,"endColumn":38},{"ruleId":"150","severity":1,"message":"166","line":3091,"column":21,"nodeType":"152","messageId":"153","endLine":3091,"endColumn":31},{"ruleId":"150","severity":1,"message":"166","line":3108,"column":21,"nodeType":"152","messageId":"153","endLine":3108,"endColumn":31},{"ruleId":"150","severity":1,"message":"166","line":3163,"column":21,"nodeType":"152","messageId":"153","endLine":3163,"endColumn":31},{"ruleId":"150","severity":1,"message":"166","line":3184,"column":21,"nodeType":"152","messageId":"153","endLine":3184,"endColumn":31},{"ruleId":"150","severity":1,"message":"166","line":3234,"column":21,"nodeType":"152","messageId":"153","endLine":3234,"endColumn":31},{"ruleId":"150","severity":1,"message":"166","line":3255,"column":21,"nodeType":"152","messageId":"153","endLine":3255,"endColumn":31},{"ruleId":"157","severity":1,"message":"167","line":3370,"column":6,"nodeType":"159","endLine":3370,"endColumn":44,"suggestions":"168"},{"ruleId":"157","severity":1,"message":"169","line":3429,"column":6,"nodeType":"159","endLine":3429,"endColumn":20,"suggestions":"170"},{"ruleId":"150","severity":1,"message":"171","line":1,"column":8,"nodeType":"152","messageId":"153","endLine":1,"endColumn":13},{"ruleId":"146","replacedBy":"172"},{"ruleId":"148","replacedBy":"173"},{"ruleId":"146","replacedBy":"174"},{"ruleId":"148","replacedBy":"175"},{"ruleId":"150","severity":1,"message":"176","line":4,"column":3,"nodeType":"152","messageId":"153","endLine":4,"endColumn":18},{"ruleId":"157","severity":1,"message":"177","line":80,"column":6,"nodeType":"159","endLine":80,"endColumn":33,"suggestions":"178"},{"ruleId":"150","severity":1,"message":"179","line":158,"column":9,"nodeType":"152","messageId":"153","endLine":158,"endColumn":35},{"ruleId":"150","severity":1,"message":"180","line":162,"column":9,"nodeType":"152","messageId":"153","endLine":162,"endColumn":30},{"ruleId":"150","severity":1,"message":"181","line":166,"column":9,"nodeType":"152","messageId":"153","endLine":166,"endColumn":37},{"ruleId":"150","severity":1,"message":"182","line":269,"column":5,"nodeType":"152","messageId":"153","endLine":269,"endColumn":36},{"ruleId":"150","severity":1,"message":"183","line":276,"column":5,"nodeType":"152","messageId":"153","endLine":276,"endColumn":42},{"ruleId":"150","severity":1,"message":"184","line":283,"column":5,"nodeType":"152","messageId":"153","endLine":283,"endColumn":36},{"ruleId":"150","severity":1,"message":"185","line":290,"column":5,"nodeType":"152","messageId":"153","endLine":290,"endColumn":37},{"ruleId":"150","severity":1,"message":"186","line":297,"column":5,"nodeType":"152","messageId":"153","endLine":297,"endColumn":41},{"ruleId":"150","severity":1,"message":"187","line":304,"column":5,"nodeType":"152","messageId":"153","endLine":304,"endColumn":36},{"ruleId":"150","severity":1,"message":"188","line":311,"column":5,"nodeType":"152","messageId":"153","endLine":311,"endColumn":40},{"ruleId":"150","severity":1,"message":"189","line":318,"column":5,"nodeType":"152","messageId":"153","endLine":318,"endColumn":30},{"ruleId":"150","severity":1,"message":"190","line":325,"column":5,"nodeType":"152","messageId":"153","endLine":325,"endColumn":33},{"ruleId":"150","severity":1,"message":"191","line":332,"column":5,"nodeType":"152","messageId":"153","endLine":332,"endColumn":40},{"ruleId":"150","severity":1,"message":"192","line":339,"column":5,"nodeType":"152","messageId":"153","endLine":339,"endColumn":44},{"ruleId":"157","severity":1,"message":"193","line":946,"column":6,"nodeType":"159","endLine":956,"endColumn":4,"suggestions":"194"},{"ruleId":"157","severity":1,"message":"195","line":1011,"column":6,"nodeType":"159","endLine":1011,"endColumn":34,"suggestions":"196"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":72,"nodeType":"199","messageId":"200","endLine":34,"endColumn":73,"suggestions":"201"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":153,"nodeType":"199","messageId":"200","endLine":34,"endColumn":154,"suggestions":"202"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":218,"nodeType":"199","messageId":"200","endLine":34,"endColumn":219,"suggestions":"203"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":245,"nodeType":"199","messageId":"200","endLine":34,"endColumn":246,"suggestions":"204"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":266,"nodeType":"199","messageId":"200","endLine":34,"endColumn":267,"suggestions":"205"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":304,"nodeType":"199","messageId":"200","endLine":34,"endColumn":305,"suggestions":"206"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":338,"nodeType":"199","messageId":"200","endLine":34,"endColumn":339,"suggestions":"207"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":407,"nodeType":"199","messageId":"200","endLine":34,"endColumn":408,"suggestions":"208"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":430,"nodeType":"199","messageId":"200","endLine":34,"endColumn":431,"suggestions":"209"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":435,"nodeType":"199","messageId":"200","endLine":34,"endColumn":436,"suggestions":"210"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":473,"nodeType":"199","messageId":"200","endLine":34,"endColumn":474,"suggestions":"211"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":486,"nodeType":"199","messageId":"200","endLine":34,"endColumn":487,"suggestions":"212"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":511,"nodeType":"199","messageId":"200","endLine":34,"endColumn":512,"suggestions":"213"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":520,"nodeType":"199","messageId":"200","endLine":34,"endColumn":521,"suggestions":"214"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":553,"nodeType":"199","messageId":"200","endLine":34,"endColumn":554,"suggestions":"215"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":577,"nodeType":"199","messageId":"200","endLine":34,"endColumn":578,"suggestions":"216"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":681,"nodeType":"199","messageId":"200","endLine":34,"endColumn":682,"suggestions":"217"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":725,"nodeType":"199","messageId":"200","endLine":34,"endColumn":726,"suggestions":"218"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":746,"nodeType":"199","messageId":"200","endLine":34,"endColumn":747,"suggestions":"219"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":788,"nodeType":"199","messageId":"200","endLine":34,"endColumn":789,"suggestions":"220"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":841,"nodeType":"199","messageId":"200","endLine":34,"endColumn":842,"suggestions":"221"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":938,"nodeType":"199","messageId":"200","endLine":34,"endColumn":939,"suggestions":"222"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1023,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1024,"suggestions":"223"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1058,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1059,"suggestions":"224"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1087,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1088,"suggestions":"225"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1093,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1094,"suggestions":"226"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1115,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1116,"suggestions":"227"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1124,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1125,"suggestions":"228"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1198,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1199,"suggestions":"229"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1205,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1206,"suggestions":"230"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1220,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1221,"suggestions":"231"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1244,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1245,"suggestions":"232"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1256,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1257,"suggestions":"233"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1264,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1265,"suggestions":"234"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1314,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1315,"suggestions":"235"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1318,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1319,"suggestions":"236"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1371,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1372,"suggestions":"237"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1377,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1378,"suggestions":"238"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1392,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1393,"suggestions":"239"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1396,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1397,"suggestions":"240"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1418,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1419,"suggestions":"241"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1430,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1431,"suggestions":"242"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1491,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1492,"suggestions":"243"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1549,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1550,"suggestions":"244"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1596,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1597,"suggestions":"245"},{"ruleId":"197","severity":1,"message":"198","line":34,"column":1612,"nodeType":"199","messageId":"200","endLine":34,"endColumn":1613,"suggestions":"246"},{"ruleId":"146","replacedBy":"172"},{"ruleId":"148","replacedBy":"173"},{"ruleId":"150","severity":1,"message":"247","line":8,"column":3,"nodeType":"152","messageId":"153","endLine":8,"endColumn":14},{"ruleId":"150","severity":1,"message":"248","line":37,"column":5,"nodeType":"152","messageId":"153","endLine":37,"endColumn":24},{"ruleId":"150","severity":1,"message":"249","line":44,"column":10,"nodeType":"152","messageId":"153","endLine":44,"endColumn":21},{"ruleId":"150","severity":1,"message":"250","line":93,"column":15,"nodeType":"152","messageId":"153","endLine":93,"endColumn":31},{"ruleId":"150","severity":1,"message":"251","line":109,"column":21,"nodeType":"152","messageId":"153","endLine":109,"endColumn":36},{"ruleId":"150","severity":1,"message":"252","line":147,"column":21,"nodeType":"152","messageId":"153","endLine":147,"endColumn":44},{"ruleId":"157","severity":1,"message":"253","line":215,"column":6,"nodeType":"159","endLine":215,"endColumn":23,"suggestions":"254"},"no-native-reassign",["255"],"no-negated-in-lhs",["256"],"@typescript-eslint/no-unused-vars","'View' is defined but never used.","Identifier","unusedVar","'localUrl' is defined but never used.","'formPreviewData' is assigned a value but never used.","'id' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'addNewInputs', 'formikConf', 'initialInputs', 'mediaInputsNav', 'mediaMiniFormInputs', 'setFormPreviewData', 'setValidSchema', 'storedRefs', 'styles.extraHeaderOptionFetchedProjectDataBackToFullPreviewPageButton', 'styles.extraHeaderOptionFreshFormBackToApiFrontPageButton', and 'validSchema'. Either include them or remove the dependency array. If 'setExtraHeaderOptions' needs the current value of 'styles.extraHeaderOptionFreshFormBackToApiFrontPageButton', you can also switch to useReducer instead of useState and read 'styles.extraHeaderOptionFreshFormBackToApiFrontPageButton' in the reducer.","ArrayExpression",["257"],"React Hook React.useEffect has missing dependencies: 'formPreviewData' and 'styles'. Either include them or remove the dependency array.",["258"],"'updatingTitle' is assigned a value but never used.","'updatingDataBaseP2Videos' is assigned a value but never used.","'updatingDataBaseP2Journal' is assigned a value but never used.","'eventTyped' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'backToApiFrontPage', 'confirmDataBaseUpload', 'createNewIdea', 'executeDataReset', 'isAuthenticated', 'mediaDataIds', 'retrieveNextFetchedProject', 'retrievePreviousFetchedProject', 'screenHeight', 'styles.apiFrontPage', 'styles.backToApiFrontPageButton', 'styles.browseIdeasForEditButton', 'styles.createNewIdeaButton', 'styles.destroyProjectButton', 'styles.editFetchedProjectButton', 'styles.finalIdeaTitle', 'styles.finalInnerMediaPreviewDisplay', 'styles.finalMediaPreviewsConsolidated', 'styles.finalPassageContentPreview', 'styles.finalPassageExtendedDataPreview', 'styles.finalPassagePreview', 'styles.finalPassageReferencesPreview', 'styles.finalPassageTitlePreview', 'styles.finalPassageWhatIsItPreview', 'styles.finalPhotoExtendedData', 'styles.finalPhotoPreview', 'styles.finalPhotoReferences', 'styles.finalPhotoTitle', 'styles.finalVideoExtendedDataPreview', 'styles.finalVideoName', 'styles.finalVideoPreview', 'styles.finalVideoType', 'styles.finalizeDataButton', 'styles.finalizeOptions', 'styles.innerMediaPreviewDisplay', 'styles.passageContentText', 'styles.previewDisplayImage', 'styles.projectsNavigationBar', 'styles.projectsNavigationNext', 'styles.projectsNavigationPrevious', 'styles.retrievedProjectOptions', and 'styles.returnToEditButton'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFormPreviewDisplay' needs the current value of 'mediaDataIds'.",["259"],"React Hook React.useEffect has missing dependencies: 'formPreviewData', 'styles.innerMediaPreviewDisplay', and 'styles.passageContentText'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFormPreviewDisplay' needs the current value of 'formPreviewData'.",["260"],"'React' is defined but never used.",["255"],["256"],["255"],["256"],"'ImageBackground' is defined but never used.","React Hook React.useEffect has a missing dependency: 'styles'. Either include it or remove the dependency array.",["261"],"'mainDisplaySupportStyleRef' is assigned a value but never used.","'galleryViewSupportRef' is assigned a value but never used.","'journalExcerptViewSupportRef' is assigned a value but never used.","'setJournalNavigationButtonImage' is assigned a value but never used.","'setMotionPictureNavigationButtonImage' is assigned a value but never used.","'setGalleryNavigationButtonImage' is assigned a value but never used.","'setNextJournalExcerptButtonImage' is assigned a value but never used.","'setPreviousJournalExcerptButtonImage' is assigned a value but never used.","'setNextMotionPictureButtonImage' is assigned a value but never used.","'setPreviousMotionPictureButtonImage' is assigned a value but never used.","'setNextGalleryButtonImage' is assigned a value but never used.","'setPreviousGaleryButtonImage' is assigned a value but never used.","'setNextProjectNavigationButtonImage' is assigned a value but never used.","'setPreviousProjectNavigationButtonImage' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'galleryNavigationButtonImage', 'journalNavigationButtonImage', 'motionPictureNavigationButtonImage', 'nextGalleryNavigationButtonImage', 'nextJournalExcerptNavigationButtonImage', 'nextMotionPictureNavigationButtonImage', 'nextProjectNavigationButtonImage', 'previousGalleryNavigationButtonImage', 'previousJournalExcerptNavigationButtonImage', 'previousMotionPictureNavigationButtonImage', and 'previousProjectNavigationButtonImage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setProjectNavigationView' needs the current value of 'journalNavigationButtonImage'.",["262"],"React Hook React.useEffect has missing dependencies: 'initialElementsEntrance' and 'tl'. Either include them or remove the dependency array.",["263"],"no-useless-escape","Unnecessary escape character: \\-.","Literal","unnecessaryEscape",["264","265"],["266","267"],["268","269"],["270","271"],["272","273"],["274","275"],["276","277"],["278","279"],["280","281"],["282","283"],["284","285"],["286","287"],["288","289"],["290","291"],["292","293"],["294","295"],["296","297"],["298","299"],["300","301"],["302","303"],["304","305"],["306","307"],["308","309"],["310","311"],["312","313"],["314","315"],["316","317"],["318","319"],["320","321"],["322","323"],["324","325"],["326","327"],["328","329"],["330","331"],["332","333"],["334","335"],["336","337"],["338","339"],["340","341"],["342","343"],["344","345"],["346","347"],["348","349"],["350","351"],["352","353"],["354","355"],"'dataBaseUrl' is defined but never used.","'authorizationStatus' is assigned a value but never used.","'screenWidth' is assigned a value but never used.","'fetchingUserData' is assigned a value but never used.","'creatingNewUser' is assigned a value but never used.","'updateUserAuthorization' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'setAuthorizationStatus' and 'user'. Either include them or remove the dependency array.",["356"],"no-global-assign","no-unsafe-negation",{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"361","fix":"362"},{"desc":"363","fix":"364"},{"desc":"365","fix":"366"},{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"messageId":"371","fix":"372","desc":"373"},{"messageId":"374","fix":"375","desc":"376"},{"messageId":"371","fix":"377","desc":"373"},{"messageId":"374","fix":"378","desc":"376"},{"messageId":"371","fix":"379","desc":"373"},{"messageId":"374","fix":"380","desc":"376"},{"messageId":"371","fix":"381","desc":"373"},{"messageId":"374","fix":"382","desc":"376"},{"messageId":"371","fix":"383","desc":"373"},{"messageId":"374","fix":"384","desc":"376"},{"messageId":"371","fix":"385","desc":"373"},{"messageId":"374","fix":"386","desc":"376"},{"messageId":"371","fix":"387","desc":"373"},{"messageId":"374","fix":"388","desc":"376"},{"messageId":"371","fix":"389","desc":"373"},{"messageId":"374","fix":"390","desc":"376"},{"messageId":"371","fix":"391","desc":"373"},{"messageId":"374","fix":"392","desc":"376"},{"messageId":"371","fix":"393","desc":"373"},{"messageId":"374","fix":"394","desc":"376"},{"messageId":"371","fix":"395","desc":"373"},{"messageId":"374","fix":"396","desc":"376"},{"messageId":"371","fix":"397","desc":"373"},{"messageId":"374","fix":"398","desc":"376"},{"messageId":"371","fix":"399","desc":"373"},{"messageId":"374","fix":"400","desc":"376"},{"messageId":"371","fix":"401","desc":"373"},{"messageId":"374","fix":"402","desc":"376"},{"messageId":"371","fix":"403","desc":"373"},{"messageId":"374","fix":"404","desc":"376"},{"messageId":"371","fix":"405","desc":"373"},{"messageId":"374","fix":"406","desc":"376"},{"messageId":"371","fix":"407","desc":"373"},{"messageId":"374","fix":"408","desc":"376"},{"messageId":"371","fix":"409","desc":"373"},{"messageId":"374","fix":"410","desc":"376"},{"messageId":"371","fix":"411","desc":"373"},{"messageId":"374","fix":"412","desc":"376"},{"messageId":"371","fix":"413","desc":"373"},{"messageId":"374","fix":"414","desc":"376"},{"messageId":"371","fix":"415","desc":"373"},{"messageId":"374","fix":"416","desc":"376"},{"messageId":"371","fix":"417","desc":"373"},{"messageId":"374","fix":"418","desc":"376"},{"messageId":"371","fix":"419","desc":"373"},{"messageId":"374","fix":"420","desc":"376"},{"messageId":"371","fix":"421","desc":"373"},{"messageId":"374","fix":"422","desc":"376"},{"messageId":"371","fix":"423","desc":"373"},{"messageId":"374","fix":"424","desc":"376"},{"messageId":"371","fix":"425","desc":"373"},{"messageId":"374","fix":"426","desc":"376"},{"messageId":"371","fix":"427","desc":"373"},{"messageId":"374","fix":"428","desc":"376"},{"messageId":"371","fix":"429","desc":"373"},{"messageId":"374","fix":"430","desc":"376"},{"messageId":"371","fix":"431","desc":"373"},{"messageId":"374","fix":"432","desc":"376"},{"messageId":"371","fix":"433","desc":"373"},{"messageId":"374","fix":"434","desc":"376"},{"messageId":"371","fix":"435","desc":"373"},{"messageId":"374","fix":"436","desc":"376"},{"messageId":"371","fix":"437","desc":"373"},{"messageId":"374","fix":"438","desc":"376"},{"messageId":"371","fix":"439","desc":"373"},{"messageId":"374","fix":"440","desc":"376"},{"messageId":"371","fix":"441","desc":"373"},{"messageId":"374","fix":"442","desc":"376"},{"messageId":"371","fix":"443","desc":"373"},{"messageId":"374","fix":"444","desc":"376"},{"messageId":"371","fix":"445","desc":"373"},{"messageId":"374","fix":"446","desc":"376"},{"messageId":"371","fix":"447","desc":"373"},{"messageId":"374","fix":"448","desc":"376"},{"messageId":"371","fix":"449","desc":"373"},{"messageId":"374","fix":"450","desc":"376"},{"messageId":"371","fix":"451","desc":"373"},{"messageId":"374","fix":"452","desc":"376"},{"messageId":"371","fix":"453","desc":"373"},{"messageId":"374","fix":"454","desc":"376"},{"messageId":"371","fix":"455","desc":"373"},{"messageId":"374","fix":"456","desc":"376"},{"messageId":"371","fix":"457","desc":"373"},{"messageId":"374","fix":"458","desc":"376"},{"messageId":"371","fix":"459","desc":"373"},{"messageId":"374","fix":"460","desc":"376"},{"messageId":"371","fix":"461","desc":"373"},{"messageId":"374","fix":"462","desc":"376"},{"messageId":"371","fix":"463","desc":"373"},{"messageId":"374","fix":"464","desc":"376"},{"messageId":"371","fix":"465","desc":"373"},{"messageId":"374","fix":"466","desc":"376"},{"desc":"467","fix":"468"},"Update the dependencies array to be: [addNewInputs, dataForForm, formikConf, initialInputs, mediaInputsNav, mediaMiniFormInputs, setFormPreviewData, setValidSchema, storedRefs, styles.extraHeaderOptionFetchedProjectDataBackToFullPreviewPageButton, styles.extraHeaderOptionFreshFormBackToApiFrontPageButton, validSchema]",{"range":"469","text":"470"},"Update the dependencies array to be: [formPreviewData, screenHeight, screenWidth, styles]",{"range":"471","text":"472"},"Update the dependencies array to be: [formPreviewData, authorizationStatus, mediaDataIds, isAuthenticated, styles.apiFrontPage, styles.createNewIdeaButton, styles.browseIdeasForEditButton, styles.innerMediaPreviewDisplay, styles.previewDisplayImage, styles.passageContentText, styles.retrievedProjectOptions, styles.backToApiFrontPageButton, styles.projectsNavigationBar, styles.projectsNavigationPrevious, styles.projectsNavigationNext, styles.editFetchedProjectButton, styles.destroyProjectButton, styles.finalizeOptions, styles.returnToEditButton, styles.finalizeDataButton, styles.finalInnerMediaPreviewDisplay, styles.finalIdeaTitle, styles.finalMediaPreviewsConsolidated, styles.finalVideoPreview, styles.finalVideoExtendedDataPreview, styles.finalVideoName, styles.finalVideoType, styles.finalPhotoPreview, styles.finalPhotoExtendedData, styles.finalPhotoTitle, styles.finalPhotoReferences, styles.finalPassagePreview, styles.finalPassageContentPreview, styles.finalPassageExtendedDataPreview, styles.finalPassageTitlePreview, styles.finalPassageWhatIsItPreview, styles.finalPassageReferencesPreview, createNewIdea, backToApiFrontPage, executeDataReset, retrievePreviousFetchedProject, retrieveNextFetchedProject, screenHeight, confirmDataBaseUpload]",{"range":"473","text":"474"},"Update the dependencies array to be: [formPreviewData, mediaDataIds, styles.innerMediaPreviewDisplay, styles.passageContentText]",{"range":"475","text":"476"},"Update the dependencies array to be: [screenHeight, screenWidth, styles]",{"range":"477","text":"478"},"Update the dependencies array to be: [projectData, currentMotionPicture, motionPictureIndexInput, galleryIndex, galleryIndexInput, journalExcerptIndex, journalExcerptIndexInput, projectSelectionIndexInput, styles, journalNavigationButtonImage, nextJournalExcerptNavigationButtonImage, previousJournalExcerptNavigationButtonImage, motionPictureNavigationButtonImage, nextMotionPictureNavigationButtonImage, previousMotionPictureNavigationButtonImage, galleryNavigationButtonImage, nextGalleryNavigationButtonImage, previousGalleryNavigationButtonImage, nextProjectNavigationButtonImage, previousProjectNavigationButtonImage]",{"range":"479","text":"480"},"Update the dependencies array to be: [initialElementsEntrance, initialProjectViewPrepared, tl]",{"range":"481","text":"482"},"removeEscape",{"range":"483","text":"484"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"485","text":"486"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"487","text":"484"},{"range":"488","text":"486"},{"range":"489","text":"484"},{"range":"490","text":"486"},{"range":"491","text":"484"},{"range":"492","text":"486"},{"range":"493","text":"484"},{"range":"494","text":"486"},{"range":"495","text":"484"},{"range":"496","text":"486"},{"range":"497","text":"484"},{"range":"498","text":"486"},{"range":"499","text":"484"},{"range":"500","text":"486"},{"range":"501","text":"484"},{"range":"502","text":"486"},{"range":"503","text":"484"},{"range":"504","text":"486"},{"range":"505","text":"484"},{"range":"506","text":"486"},{"range":"507","text":"484"},{"range":"508","text":"486"},{"range":"509","text":"484"},{"range":"510","text":"486"},{"range":"511","text":"484"},{"range":"512","text":"486"},{"range":"513","text":"484"},{"range":"514","text":"486"},{"range":"515","text":"484"},{"range":"516","text":"486"},{"range":"517","text":"484"},{"range":"518","text":"486"},{"range":"519","text":"484"},{"range":"520","text":"486"},{"range":"521","text":"484"},{"range":"522","text":"486"},{"range":"523","text":"484"},{"range":"524","text":"486"},{"range":"525","text":"484"},{"range":"526","text":"486"},{"range":"527","text":"484"},{"range":"528","text":"486"},{"range":"529","text":"484"},{"range":"530","text":"486"},{"range":"531","text":"484"},{"range":"532","text":"486"},{"range":"533","text":"484"},{"range":"534","text":"486"},{"range":"535","text":"484"},{"range":"536","text":"486"},{"range":"537","text":"484"},{"range":"538","text":"486"},{"range":"539","text":"484"},{"range":"540","text":"486"},{"range":"541","text":"484"},{"range":"542","text":"486"},{"range":"543","text":"484"},{"range":"544","text":"486"},{"range":"545","text":"484"},{"range":"546","text":"486"},{"range":"547","text":"484"},{"range":"548","text":"486"},{"range":"549","text":"484"},{"range":"550","text":"486"},{"range":"551","text":"484"},{"range":"552","text":"486"},{"range":"553","text":"484"},{"range":"554","text":"486"},{"range":"555","text":"484"},{"range":"556","text":"486"},{"range":"557","text":"484"},{"range":"558","text":"486"},{"range":"559","text":"484"},{"range":"560","text":"486"},{"range":"561","text":"484"},{"range":"562","text":"486"},{"range":"563","text":"484"},{"range":"564","text":"486"},{"range":"565","text":"484"},{"range":"566","text":"486"},{"range":"567","text":"484"},{"range":"568","text":"486"},{"range":"569","text":"484"},{"range":"570","text":"486"},{"range":"571","text":"484"},{"range":"572","text":"486"},{"range":"573","text":"484"},{"range":"574","text":"486"},{"range":"575","text":"484"},{"range":"576","text":"486"},"Update the dependencies array to be: [isAuthenticated, setAuthorizationStatus, user]",{"range":"577","text":"578"},[49159,49172],"[addNewInputs, dataForForm, formikConf, initialInputs, mediaInputsNav, mediaMiniFormInputs, setFormPreviewData, setValidSchema, storedRefs, styles.extraHeaderOptionFetchedProjectDataBackToFullPreviewPageButton, styles.extraHeaderOptionFreshFormBackToApiFrontPageButton, validSchema]",[57409,57436],"[formPreviewData, screenHeight, screenWidth, styles]",[126318,126356],"[formPreviewData, authorizationStatus, mediaDataIds, isAuthenticated, styles.apiFrontPage, styles.createNewIdeaButton, styles.browseIdeasForEditButton, styles.innerMediaPreviewDisplay, styles.previewDisplayImage, styles.passageContentText, styles.retrievedProjectOptions, styles.backToApiFrontPageButton, styles.projectsNavigationBar, styles.projectsNavigationPrevious, styles.projectsNavigationNext, styles.editFetchedProjectButton, styles.destroyProjectButton, styles.finalizeOptions, styles.returnToEditButton, styles.finalizeDataButton, styles.finalInnerMediaPreviewDisplay, styles.finalIdeaTitle, styles.finalMediaPreviewsConsolidated, styles.finalVideoPreview, styles.finalVideoExtendedDataPreview, styles.finalVideoName, styles.finalVideoType, styles.finalPhotoPreview, styles.finalPhotoExtendedData, styles.finalPhotoTitle, styles.finalPhotoReferences, styles.finalPassagePreview, styles.finalPassageContentPreview, styles.finalPassageExtendedDataPreview, styles.finalPassageTitlePreview, styles.finalPassageWhatIsItPreview, styles.finalPassageReferencesPreview, createNewIdea, backToApiFrontPage, executeDataReset, retrievePreviousFetchedProject, retrieveNextFetchedProject, screenHeight, confirmDataBaseUpload]",[128634,128648],"[formPreviewData, mediaDataIds, styles.innerMediaPreviewDisplay, styles.passageContentText]",[2401,2428],"[screenHeight, screenWidth, styles]",[38089,38316],"[projectData, currentMotionPicture, motionPictureIndexInput, galleryIndex, galleryIndexInput, journalExcerptIndex, journalExcerptIndexInput, projectSelectionIndexInput, styles, journalNavigationButtonImage, nextJournalExcerptNavigationButtonImage, previousJournalExcerptNavigationButtonImage, motionPictureNavigationButtonImage, nextMotionPictureNavigationButtonImage, previousMotionPictureNavigationButtonImage, galleryNavigationButtonImage, nextGalleryNavigationButtonImage, previousGalleryNavigationButtonImage, nextProjectNavigationButtonImage, previousProjectNavigationButtonImage]",[40013,40041],"[initialElementsEntrance, initialProjectViewPrepared, tl]",[1546,1547],"",[1546,1546],"\\",[1627,1628],[1627,1627],[1692,1693],[1692,1692],[1719,1720],[1719,1719],[1740,1741],[1740,1740],[1778,1779],[1778,1778],[1812,1813],[1812,1812],[1881,1882],[1881,1881],[1904,1905],[1904,1904],[1909,1910],[1909,1909],[1947,1948],[1947,1947],[1960,1961],[1960,1960],[1985,1986],[1985,1985],[1994,1995],[1994,1994],[2027,2028],[2027,2027],[2051,2052],[2051,2051],[2155,2156],[2155,2155],[2199,2200],[2199,2199],[2220,2221],[2220,2220],[2262,2263],[2262,2262],[2315,2316],[2315,2315],[2412,2413],[2412,2412],[2497,2498],[2497,2497],[2532,2533],[2532,2532],[2561,2562],[2561,2561],[2567,2568],[2567,2567],[2589,2590],[2589,2589],[2598,2599],[2598,2598],[2672,2673],[2672,2672],[2679,2680],[2679,2679],[2694,2695],[2694,2694],[2718,2719],[2718,2718],[2730,2731],[2730,2730],[2738,2739],[2738,2738],[2788,2789],[2788,2788],[2792,2793],[2792,2792],[2845,2846],[2845,2845],[2851,2852],[2851,2851],[2866,2867],[2866,2866],[2870,2871],[2870,2870],[2892,2893],[2892,2892],[2904,2905],[2904,2904],[2965,2966],[2965,2965],[3023,3024],[3023,3023],[3070,3071],[3070,3070],[3086,3087],[3086,3086],[7524,7541],"[isAuthenticated, setAuthorizationStatus, user]"]